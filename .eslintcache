[{"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\FileTranslationStore.js":"1","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\HomeLayout.js":"2","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TranslationStore.js":"3","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TrainController.js":"4","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\MemberStore.js":"5","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\DictionaryController.js":"6","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\MemberController.js":"7","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\DictionaryStore.js":"8","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\DictionaryView.js":"9","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\RootStore.js":"10","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TrainView.js":"11","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\SignUpView.js":"12","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\reportWebVitals.js":"13","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\index.js":"14","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\App.js":"15","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\Context.js":"16","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\FileTranslationView.js":"17","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\SignInView.js":"18","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TranslationView.js":"19","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\CustomUploadTable.js":"20","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TrainStore.js":"21","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Member.js":"22","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TranslationController.js":"23","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Dictionary.js":"24","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Train.js":"25"},{"size":2754,"mtime":1621520090951,"results":"26","hashOfConfig":"27"},{"size":5763,"mtime":1621520090934,"results":"28","hashOfConfig":"27"},{"size":647,"mtime":1620051538249,"results":"29","hashOfConfig":"27"},{"size":1378,"mtime":1621580175025,"results":"30","hashOfConfig":"27"},{"size":1077,"mtime":1621582419483,"results":"31","hashOfConfig":"27"},{"size":1632,"mtime":1621583629089,"results":"32","hashOfConfig":"27"},{"size":946,"mtime":1621771798291,"results":"33","hashOfConfig":"27"},{"size":966,"mtime":1621583534831,"results":"34","hashOfConfig":"27"},{"size":3979,"mtime":1621583395147,"results":"35","hashOfConfig":"27"},{"size":215,"mtime":1621520090953,"results":"36","hashOfConfig":"27"},{"size":10795,"mtime":1620051538222,"results":"37","hashOfConfig":"27"},{"size":5336,"mtime":1621774224223,"results":"38","hashOfConfig":"27"},{"size":375,"mtime":1616817541588,"results":"39","hashOfConfig":"27"},{"size":504,"mtime":1621520090946,"results":"40","hashOfConfig":"27"},{"size":2906,"mtime":1621774168268,"results":"41","hashOfConfig":"27"},{"size":259,"mtime":1621520090950,"results":"42","hashOfConfig":"27"},{"size":2675,"mtime":1621520090938,"results":"43","hashOfConfig":"27"},{"size":3942,"mtime":1621520090940,"results":"44","hashOfConfig":"27"},{"size":11969,"mtime":1620652182946,"results":"45","hashOfConfig":"27"},{"size":6842,"mtime":1621520090935,"results":"46","hashOfConfig":"27"},{"size":1133,"mtime":1620051538247,"results":"47","hashOfConfig":"27"},{"size":278,"mtime":1620652182958,"results":"48","hashOfConfig":"27"},{"size":331,"mtime":1620652182953,"results":"49","hashOfConfig":"27"},{"size":280,"mtime":1621520090949,"results":"50","hashOfConfig":"27"},{"size":106,"mtime":1620652182960,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"173cpxz",{"filePath":"56","messages":"57","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"55"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\FileTranslationStore.js",["112","113"],"import { makeAutoObservable, observable, computed, action, flow } from \"mobx\"\r\nexport class FileTranslationStore {\r\n    originalFiles = [];\r\n    translatedFiles = [];\r\n    fileCount = 0;\r\n    selected = [];\r\n\r\n    constructor() {\r\n        makeAutoObservable(this, {\r\n            originalFiles: observable,\r\n            translatedFiles: observable,\r\n            fileCount: observable,\r\n            selected: observable,\r\n            uploadFile: action,\r\n            DeleteFiles: action,\r\n            setSelected: action,\r\n            setSelectAll: action,\r\n        });\r\n    }\r\n\r\n    uploadFile(fileList) {\r\n        for (const file of fileList) {\r\n            const reader = new FileReader();\r\n            reader.readAsText(file);\r\n\r\n            reader.onload = (e) => {\r\n                const content = e.target.result;\r\n\r\n                let fileInfo = {\r\n                    name: file.name,\r\n                    size: file.size,\r\n                    content: content,\r\n                }\r\n\r\n                const index = this.findIndex(file);\r\n\r\n                if (index === -1) {\r\n                    this.originalFiles.push(fileInfo)\r\n                    this.fileCount++;\r\n                } else {\r\n                    this.originalFiles[index] = fileInfo;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    findIndex(file) {\r\n        const fileName = file.name;\r\n\r\n        return this.originalFiles.findIndex(e => e.name === fileName);\r\n    }\r\n\r\n    DeleteFiles() {\r\n        for (const name of this.selected) {\r\n            this.originalFiles = this.originalFiles.filter((file) => file.name !== name)\r\n        }\r\n        this.fileCount = this.originalFiles.length;\r\n        this.selected = [];\r\n    }\r\n\r\n    setSelected(name) {\r\n        const selectedIndex = this.selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(this.selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(this.selected.slice(1));\r\n        } else if (selectedIndex === this.selected.length - 1) {\r\n            newSelected = newSelected.concat(this.selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                this.selected.slice(0, selectedIndex),\r\n                this.selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        this.selected = [...newSelected]\r\n    }\r\n\r\n    setSelectAll(event) {\r\n        const newSelected = []\r\n\r\n        if (event.target.checked) {\r\n            this.originalFiles.forEach((file) => {\r\n                newSelected.push(file.name)\r\n            })\r\n        }\r\n\r\n        this.selected = [...newSelected]\r\n    }\r\n};\r\n",["114","115"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\HomeLayout.js",["116","117","118","119","120","121","122"],"import React, { Component, useState, useEffect } from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    appBar: {\r\n        backgroundColor: '#58a0d1',\r\n    },\r\n    contentGrid: {\r\n        paddingLeft: '3%',\r\n        width: '40%',\r\n    },\r\n    accountGrid: {\r\n        width: '60%',\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontWeight: 600,\r\n    },\r\n    contentArea: {\r\n        paddingTop: '5%',\r\n        width: '100%',\r\n        height: '100%',\r\n        minHeight: '80%',\r\n        minWidth: '100%',\r\n        position: 'sticky',\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n    },\r\n    accountIcon: {\r\n        float: 'right',\r\n    },\r\n}));\r\n\r\nfunction HomeLayout(props) {\r\n    const { children } = props;\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyle();\r\n    const cookies = props.cookies;\r\n    const setHasCookie = props.setHasCookie;\r\n    const removeCookie = props.removeCookie;\r\n    const hasCookie = props.hasCookie;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar className={classes.toolBar} alignItems=\"flex-end\" position=\"fixed\">\r\n                    <Grid\r\n                        className={classes.contentGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-between\"\r\n                        alignItems=\"flex-start\"\r\n                    >\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                北파고\r\n                            </Button>\r\n                        </Link>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago/file-translate',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                파일번역\r\n                            </Button>\r\n                        </Link>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago/dictionary',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                북한말 사전\r\n                            </Button>\r\n                        </Link>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago/train',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                北파고 Train\r\n                            </Button>\r\n                        </Link>\r\n                    </Grid>\r\n                    <Grid\r\n                        className={classes.accountGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-end\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <div className={classes.accountIcon}>\r\n                            {hasCookie == false ? (\r\n                                <div>\r\n                                    <Link\r\n                                        to={{\r\n                                            pathname: '/buk-pago/signIn',\r\n                                        }}\r\n                                        style={{ textDecoration: 'none' }}\r\n                                    >\r\n                                        <Button className={classes.title} variant=\"contained\">\r\n                                            로그인\r\n                                        </Button>\r\n                                    </Link>\r\n                                </div>\r\n                            ) : (\r\n                                <div>\r\n                                    <IconButton>\r\n                                        <ExitToAppIcon color=\"secondary\" fontSize=\"large\" />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        className={classes.accountIcon}\r\n                                        onClick={removeCookie}\r\n                                    >\r\n                                        <AccountCircle color=\"secondary\" fontSize=\"large\" />\r\n                                    </IconButton>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.contentArea}>{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeLayout;\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TranslationStore.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TrainController.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\MemberStore.js",["123","124"],"import { action, observable } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestLogin, { requestSignUp, requestGetRanker } from '../controllers/MemberController';\r\nimport Member from '../models/Member';\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nclass MemberStore {\r\n    @observable members = [];\r\n    static instance = null;\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n    static getInstance() {\r\n        if (!MemberStore.instance) this.instance = new MemberStore();\r\n        return MemberStore.instance;\r\n    }\r\n\r\n    @action\r\n    register(id, pw, name, email) {\r\n        return requestSignUp(id, pw, name, email).then((result) => {\r\n            return result;\r\n        });\r\n    }\r\n\r\n    @action\r\n    login(id, pw) {\r\n        return requestLogin(id, pw).then((result) => {\r\n            return result;\r\n        });\r\n    }\r\n\r\n    @action\r\n    getRanker() {\r\n        return requestGetRanker().then((result) => {\r\n            return result;\r\n        });\r\n    }\r\n}\r\nexport default MemberStore = MemberStore.getInstance();\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\DictionaryController.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\MemberController.js",["125"],"import axios from 'axios';\r\nimport Member from '../models/Member';\r\n\r\nexport default async function requestLogin(_id, _pw) {\r\n    return await axios\r\n        .post('/api/member/login', { id: _id, password: _pw })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err;\r\n        });\r\n}\r\n\r\nexport async function requestSignUp(id, pw, name, email) {\r\n    return await axios\r\n        .post('/api/member/signUp', {\r\n            pw: pw,\r\n            id: id,\r\n            name: name,\r\n            email: email,\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err;\r\n        });\r\n}\r\n\r\nexport async function requestGetRanker() {\r\n    return await axios\r\n        .get('/api/member/rank')\r\n        .catch((error) => {\r\n            return error;\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        });\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\DictionaryStore.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\DictionaryView.js",["126","127"],"import React, { useEffect, useRef, useState } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DictionaryStore from '../stores/DictionaryStore';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nvar elem = document.compatMode === 'CSS1Compat' ? document.documentElement : document.body;\r\n\r\nvar height = elem.clientHeight;\r\nvar width = elem.clientWidth;\r\n\r\nfunction getWidth(tableRate, rate) {\r\n    return width * tableRate * rate;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n        paddingBottom: '1%',\r\n    },\r\n    table: {\r\n        paddingTop: '1%',\r\n        height: height * 0.6,\r\n        width: '75%',\r\n    },\r\n    search: {\r\n        width: '50%',\r\n    },\r\n});\r\n\r\nconst columns = [\r\n    { field: 'id', headerName: '북한어', width: getWidth(0.75, 2 / 9) },\r\n    { field: 'south', headerName: '남한어', width: getWidth(0.75, 2 / 9) },\r\n    { field: 'mean', headerName: '뜻', width: getWidth(0.75, 5 / 10) },\r\n];\r\n\r\nexport default function DictionaryView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const [code, setCode] = useState(1);\r\n    const onChange = (e) => {\r\n        const str = e.target.value;\r\n        setInputText(str);\r\n    };\r\n\r\n    const handleChange = (event) => {\r\n        setCode(event.target.value);\r\n    };\r\n\r\n    const search = () => {\r\n        dictionaryStore.searchDic(code, inputText);\r\n    };\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            search();\r\n        }\r\n    };\r\n\r\n    const dictionaryStore = React.useContext(DictionaryStore.context);\r\n    useEffect(() => {\r\n        dictionaryStore.getDictionary();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.title}>\r\n                <Typography className={classes.title} variant=\"h3\">\r\n                    북한말 사전\r\n                </Typography>\r\n                <div>\r\n                    <FormControl className={classes.formControl}>\r\n                        <Select value={code} onChange={handleChange}>\r\n                            <MenuItem value={1}>북한어</MenuItem>\r\n                            <MenuItem value={2}>남한어</MenuItem>\r\n                            <MenuItem value={3}>뜻</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <TextField\r\n                        className={classes.search}\r\n                        id=\"standard-search\"\r\n                        type=\"search\"\r\n                        onKeyPress={handleKeyDown}\r\n                        onChange={onChange}\r\n                    />\r\n                    <SearchIcon onClick={search} />\r\n                </div>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid\r\n                    className={classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <div className={classes.table}>\r\n                        <DataGrid\r\n                            columns={columns}\r\n                            rows={dictionaryStore.dictionarys}\r\n                            pageSize={8}\r\n                        />\r\n                    </div>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\RootStore.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TrainView.js",["128","129","130","131"],"import React, { useEffect, useState} from 'react'\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport Button from '@material-ui/core/Button';\r\nimport { Typography } from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MemberStore from '../stores/MemberStore'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TrainStore from '../stores/TrainStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    trainText: {\r\n        paddingTop: '2%',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '2%',\r\n    },\r\n    mainContent: {\r\n        width : '100%',\r\n    },\r\n    testCard: {\r\n        marginTop:'3%',\r\n        width: \"50%\",\r\n        height : \"50%\",\r\n        marginLeft: '10%',\r\n    },\r\n    card:{\r\n        padding:'2%'\r\n    },\r\n    pass: {\r\n        float: 'right',\r\n        marginRight: '2%'\r\n    },\r\n    cardGrid: {\r\n        marginTop:'5%',\r\n        width: '100%'\r\n    },\r\n    rankingCard : {\r\n        width: '20%',\r\n        marginLeft : '7%'\r\n    },\r\n    mainGrid : {\r\n        width : '100%'\r\n    },\r\n    ranking : {\r\n        paddingBottom:'5%',\r\n        marginTop: '15%'\r\n    },\r\n    rankingNum : {\r\n        marginTop: '10%'\r\n    }\r\n}\r\n)\r\n\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const trainStore = React.useContext(TrainStore.context);\r\n    const memberStore = React.useContext(MemberStore.context);\r\n    const [inputText,setInputText] = useState('우리는 영광스러운 조선로동당과 조국력사에 빛나는 리정표를 아로새긴 승리자의 긍지와 자부심에 넘쳐 새해 2016년을 맞이합니다.');\r\n    const [outputText,setOutputText] = useState('우리는 영광스러운 조선노동당과 조국 역사에 빛나는 이정표를 아로새긴 승리자의 긍지와 자부심에 넘쳐 새해 2016년을 맞이합니다.');\r\n    const [ranking, setRanking] = useState(['점주오','면주오','선주오','앉은주오','누운주오','나는주오','선주사','선주육','선주칠','선주일','선주이','선수오']);\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n\r\n     const getTestCase = () => {\r\n        /*trainStore.getTestCase().then(result =>{\r\n            setInputText(result[0])\r\n            setOutputText(result[1])\r\n        });*/\r\n    }\r\n\r\n    useEffect(() => {\r\n        /* \r\n        getTestCase();\r\n        memberStore.getRanker().then(result=>{\r\n            setRanking(result)\r\n        });*/\r\n\r\n    }, []);\r\n\r\n    const transLike = () => {\r\n        trainStore.transLike(true,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const transDislike = () => {\r\n        trainStore.transLike(false,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n   \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className= {classes.root}>\r\n            <div className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    北파고 트레이닝\r\n                </Typography>\r\n            </div>\r\n            <div className = {classes.content}>\r\n                <div className={classes.mainContent}>\r\n                    <Grid \r\n                        className= {classes.mainGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        <div className={classes.testCard}>\r\n                            <Card className={classes.card}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.trainText} variant=\"h5\" >\r\n                                        {inputText}\r\n                                    </Typography>\r\n                                    <br />\r\n                                    <Typography variant=\"h6\" >\r\n                                        {outputText}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                        <Grid\r\n                                            className = {classes.cardGrid}\r\n                                            container \r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            spacing={4}\r\n                                        >\r\n                                            <Grid item>\r\n                                                <Button \r\n                                                    variant=\"contained\"\r\n                                                    disableRipple\r\n                                                    size='large'\r\n                                                    onClick={transLike}\r\n                                                >\r\n                                                    <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                                </Button>\r\n                                            </Grid>\r\n                                            \r\n                                            <Grid item>\r\n                                                <Button \r\n                                                    variant=\"contained\"\r\n                                                    disableRipple\r\n                                                    size='large'\r\n                                                    onClick={transDislike}\r\n                                                >\r\n                                                    <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                                </Button>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                <div>\r\n                                    <Tooltip className={classes.pass} onClick={getTestCase}  disableHoverListener title=\"Add\" >\r\n                                        <Button>건너뛰기 → </Button>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        \r\n                        <div className={classes.rankingCard}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Grid\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                        >\r\n                                            <div>\r\n                                                <Grid container justify=\"center\" alignItems=\"center\">\r\n                                                    <Typography className = {classes.title} variant=\"h5\">\r\n                                                        오늘의 순위\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </div>\r\n                                            <div className={classes.ranking} >\r\n                                                <Grid\r\n                                                    container\r\n                                                    direction=\"column\"\r\n                                                    justify=\"center\"\r\n                                                    alignItems=\"center\"\r\n                                                    spacing={7}\r\n                                                >\r\n                                                    \r\n                                                {\r\n                                                    ranking.map((value,idx) => {\r\n                                                        \r\n                                                        return (\r\n                                                            \r\n                                                            <div>\r\n                                                                <Typography className={classes.rankingNum} variant=\"h6\" >{idx+1}. {value}</Typography>\r\n                                                            </div>\r\n\r\n                                                               \r\n                                                        )\r\n                                                    }\r\n                                                    )\r\n                                                }\r\n                                                </Grid>\r\n                                            </div>\r\n                                        </Grid>\r\n                                        \r\n                                    </CardContent>\r\n                                </Card>\r\n                        </div>\r\n                    </Grid>\r\n                    \r\n                    </div>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\SignUpView.js",["132","133","134","135","136"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\reportWebVitals.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\index.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\App.js",["137","138","139","140","141"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\Context.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\FileTranslationView.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\SignInView.js",["142"],"import React, { useRef, useContext } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MemberStore from '../stores/MemberStore';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const classes = useStyles();\r\n    const memberStore = useContext(MemberStore.context);\r\n    const id = useRef('');\r\n    const pw = useRef('');\r\n    const login = () => {\r\n        memberStore.login(id, pw);\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    로그인\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"id\"\r\n                        autoComplete=\"current-id\"\r\n                        autoFocus\r\n                        inputRef={id}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        inputRef={pw}\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={login}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                비밀번호 찾기\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"/buk-pago/signUp\" variant=\"body2\">\r\n                                {'회원가입 하기'}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TranslationView.js",["143","144","145","146"],"import React, { useState } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TranslationStore from '../stores/TranslationStore';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TrainStore from '../stores/TrainStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '1%',\r\n    },\r\n    paper: {\r\n        marginTop: '1%',\r\n        width: '35%',\r\n        height: '50%',\r\n        position: 'relative',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        float: 'right',\r\n    },\r\n    box: {\r\n        //display: 'flex',\r\n        //flex: 1,\r\n        //flexDirection: 'row-reverse',\r\n    },\r\n    textLength: {\r\n        position: 'absolute',\r\n        right: '2%',\r\n        bottom: '10%',\r\n    },\r\n    clearButton: {\r\n        position: 'absolute',\r\n        right: '0%',\r\n        top: '0%',\r\n    },\r\n    bukPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#ffd6d6',\r\n    },\r\n    namPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#d6f8ff',\r\n    },\r\n    upDownBtn: {\r\n        float: 'left',\r\n    },\r\n});\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputTextLength, setInputTextLength] = useState(0);\r\n    const [outputTextLength, setOutputTextLength] = useState(0);\r\n    const [outputText, setOutputText] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n    const [translateState, setTranslateState] = useState(false);\r\n    const maxTextLength = 3000;\r\n    const translationStore = React.useContext(TranslationStore.context);\r\n    const trainStore = React.useContext(TrainStore.context);\r\n    const onInputChange = (e) => {\r\n        const str = e.target.value;\r\n        setTranslateState(false);\r\n        if (str.length <= maxTextLength) {\r\n            setInputText(str);\r\n            setInputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const onOutputChange = (e) => {\r\n        const str = e.target.value;\r\n        if (str.length <= maxTextLength) {\r\n            setOutputText(str);\r\n            setOutputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n    const textClear = () => {\r\n        setInputText('');\r\n        setInputTextLength(0);\r\n        setTranslateState(false);\r\n        setOutputText('');\r\n    };\r\n\r\n    const copyText = () => {\r\n        navigator.clipboard.writeText(outputText);\r\n        setContent('복사가 완료되었습니다.');\r\n        setSeverity('success');\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const transLike = () => {\r\n        trainStore\r\n            .transLike(true, inputText, outputText)\r\n            .then((result) => {\r\n                setContent('피드백 감사합니다! :)');\r\n                setSeverity('success');\r\n                setOpen(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const transDislike = () => {\r\n        trainStore\r\n            .transLike(false, inputText, outputText)\r\n            .then((result) => {\r\n                setContent('피드백 감사합니다! :)');\r\n                setSeverity('success');\r\n                setOpen(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const translate = () => {\r\n        translationStore\r\n            .translate(inputText)\r\n            .then((result) => {\r\n                setOutputText(result);\r\n                setTranslateState(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const transOffer = () => {\r\n        trainStore\r\n            .transOffer(inputText, outputText)\r\n            .then((result) => {\r\n                setContent('피드백 감사합니다! :)');\r\n                setSeverity('success');\r\n                setOpen(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.title}>\r\n                <Typography className={classes.title} variant=\"h3\">\r\n                    북한어 번역\r\n                </Typography>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid\r\n                    className={classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Paper className={classes.bukPaper}>\r\n                        <Typography variant=\"h5\">북한어</Typography>\r\n                    </Paper>\r\n                    <Paper className={classes.namPaper}>\r\n                        <Typography variant=\"h5\">남한어</Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            autoFocus\r\n                            rows={17}\r\n                            onChange={onInputChange}\r\n                            value={inputText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Typography className={classes.textLength}>\r\n                            {inputTextLength} / {maxTextLength}\r\n                        </Typography>\r\n                        <Box className={classes.box}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                onClick={translate}\r\n                                color=\"primary\"\r\n                            >\r\n                                번역하기\r\n                            </Button>\r\n                            {inputTextLength == 0 ? null : (\r\n                                <IconButton\r\n                                    className={classes.clearButton}\r\n                                    variant=\"contained\"\r\n                                    onClick={textClear}\r\n                                >\r\n                                    <ClearIcon></ClearIcon>\r\n                                </IconButton>\r\n                            )}\r\n                        </Box>\r\n                    </Paper>\r\n\r\n                    <Paper className={classes.paper}>\r\n                        {translateState == false ? (\r\n                            <TextField\r\n                                className={classes.textField}\r\n                                id=\"outlined-multiline-static\"\r\n                                multiline\r\n                                rows={17}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    readOnly: true,\r\n                                }}\r\n                                value={outputText}\r\n                            />\r\n                        ) : (\r\n                            <TextField\r\n                                className={classes.textField}\r\n                                id=\"outlined-multiline-static\"\r\n                                multiline\r\n                                rows={17}\r\n                                variant=\"outlined\"\r\n                                value={outputText}\r\n                                onChange={onOutputChange}\r\n                            />\r\n                        )}\r\n                        <Box className={classes.box}>\r\n                            {translateState == false ? null : (\r\n                                <ButtonGroup\r\n                                    color=\"primary\"\r\n                                    aria-label=\"outlined primary button group\"\r\n                                >\r\n                                    <Button\r\n                                        className={classes.upDownBtn}\r\n                                        disableRipple\r\n                                        color=\"primary\"\r\n                                        onClick={transLike}\r\n                                    >\r\n                                        <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={classes.upDownBtn}\r\n                                        disableRipple\r\n                                        color=\"primary\"\r\n                                        onClick={transDislike}\r\n                                    >\r\n                                        <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={classes.upDownBtn}\r\n                                        disableRipple\r\n                                        color=\"primary\"\r\n                                        onClick={transOffer}\r\n                                    >\r\n                                        수정하기\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            )}\r\n\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                color=\"primary\"\r\n                                onClick={copyText}\r\n                            >\r\n                                <FileCopyIcon></FileCopyIcon>\r\n                            </Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\CustomUploadTable.js",["147"],"import { useState } from 'react';\r\nimport { observer } from 'mobx-react'\r\nimport { Button, Checkbox, lighten, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Toolbar, Typography } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\nimport { useStores } from '../stores/Context';\r\nimport clsx from 'clsx';\r\n\r\nconst useCustomTableStyles = makeStyles({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    toolbarRoot: {\r\n        paddingTop: '1%'\r\n    },\r\n    toolbarTitle: {\r\n        flex: \"1 1\",\r\n    },\r\n    button: {\r\n        color: 'white',\r\n        fontWeight: \"600\",\r\n        fontSize: \"1rem\",\r\n    },\r\n    uploadButton: {\r\n        backgroundColor: '#228b22',\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    highlight: {\r\n        color: '#f50057',\r\n        backgroundColor: lighten('#ff4081', 0.85),\r\n    },\r\n    headerRoot: {\r\n        width: '100%'\r\n    },\r\n    idCell: {\r\n        width: '5%'\r\n    },\r\n    nameCell: {\r\n        width: '75%'\r\n    },\r\n    sizeCell: {\r\n        width: '20%'\r\n    },\r\n})\r\n\r\nexport default observer(function CustomUploadTable(props) {\r\n    const classes = useCustomTableStyles();\r\n    const { FileTranslationStore } = useStores();\r\n\r\n    const returnFileSize = (size) => {\r\n        if (size === 0) {\r\n            return 'n/a'\r\n        }\r\n\r\n        var sizes = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\r\n        var e = Math.floor(Math.log(size) / Math.log(1024));\r\n        return (size / Math.pow(1024, e)).toFixed(2) + \" \" + sizes[e];\r\n    }\r\n\r\n    const handleUploadFile = (event) => {\r\n        if (event.target.click) {\r\n            const files = event.target.files;\r\n            FileTranslationStore.uploadFile(files)\r\n        }\r\n    }\r\n\r\n    const handleDeleteFile = (event) => {\r\n        FileTranslationStore.DeleteFiles();\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        FileTranslationStore.setSelectAll(event);\r\n    }\r\n\r\n    const handleClick = (event, name) => {\r\n        FileTranslationStore.setSelected(name);\r\n    }\r\n\r\n    const isSelected = (name) => {\r\n        return FileTranslationStore.selected.indexOf(name) !== -1;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Toolbar className={clsx(classes.toolbarRoot, { [classes.highlight]: FileTranslationStore.selected.length > 0 })}>\r\n                {\r\n                    FileTranslationStore.numSelected > 0 ? (\r\n                        <Typography className={classes.toolbarTitle} variant=\"subtitle1\" component=\"div\">\r\n                            {FileTranslationStore.numSelected} 선택 됨\r\n                        </Typography>\r\n                    ) : (\r\n                        <Typography className={classes.toolbarTitle} variant=\"h6\" component=\"div\">\r\n                            원본파일\r\n                        </Typography>\r\n                    )\r\n                }\r\n                {FileTranslationStore.selected.length > 0 ? (\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                        color=\"secondary\"\r\n                        endIcon={<DeleteIcon />}\r\n                        onClick={handleDeleteFile}\r\n                    >\r\n                        삭제\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        className={clsx(classes.button, classes.uploadButton)}\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                        for=\"upload\"\r\n                        endIcon={<PublishIcon />}\r\n                    >\r\n                        업로드\r\n                        <input\r\n                            id='upload'\r\n                            className={classes.input}\r\n                            multiple\r\n                            type=\"file\"\r\n                            accept=\".txt\"\r\n                            onChange={handleUploadFile}\r\n                        />\r\n                    </Button>\r\n                )\r\n                }\r\n            </Toolbar>\r\n            <TableContainer>\r\n                <Table className={classes.table}>\r\n                    <TableHead className={classes.headerRoot}>\r\n                        <TableRow>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox\r\n                                    indeterminate={FileTranslationStore.selected.length > 0 && FileTranslationStore.selected.length < FileTranslationStore.fileCount}\r\n                                    checked={FileTranslationStore.fileCount > 0 && FileTranslationStore.selected.length === FileTranslationStore.fileCount}\r\n                                    onChange={handleSelectAllClick}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell className={classes.idCell} key='id' align='center'>ID</TableCell>\r\n                            <TableCell className={classes.nameCell} key='fileName' align='left'>파일 이름</TableCell>\r\n                            <TableCell className={classes.sizeCell} key='filSize' align='left'>파일 크기</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {FileTranslationStore.originalFiles.map((fileInfo, index) => {\r\n                            const isItemSelected = isSelected(fileInfo.name);\r\n\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    onClick={(event) => handleClick(event, fileInfo.name)}\r\n                                    role=\"checkbox\"\r\n                                    key={fileInfo.name}\r\n                                    selected={isItemSelected}\r\n                                >\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox\r\n                                            checked={isItemSelected}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.idCell}>{index + 1}</TableCell>\r\n                                    <TableCell className={classes.nameCell}>{fileInfo.name}</TableCell>\r\n                                    <TableCell className={classes.sizeCell}>{returnFileSize(fileInfo.size)}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n});","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TrainStore.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Member.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TranslationController.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Dictionary.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Train.js",[],{"ruleId":"148","severity":1,"message":"149","line":1,"column":42,"nodeType":"150","messageId":"151","endLine":1,"endColumn":50},{"ruleId":"148","severity":1,"message":"152","line":1,"column":60,"nodeType":"150","messageId":"151","endLine":1,"endColumn":64},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"148","severity":1,"message":"157","line":1,"column":17,"nodeType":"150","messageId":"151","endLine":1,"endColumn":26},{"ruleId":"148","severity":1,"message":"158","line":1,"column":38,"nodeType":"150","messageId":"151","endLine":1,"endColumn":47},{"ruleId":"148","severity":1,"message":"159","line":48,"column":12,"nodeType":"150","messageId":"151","endLine":48,"endColumn":16},{"ruleId":"148","severity":1,"message":"160","line":48,"column":18,"nodeType":"150","messageId":"151","endLine":48,"endColumn":25},{"ruleId":"148","severity":1,"message":"161","line":50,"column":11,"nodeType":"150","messageId":"151","endLine":50,"endColumn":18},{"ruleId":"148","severity":1,"message":"162","line":51,"column":11,"nodeType":"150","messageId":"151","endLine":51,"endColumn":23},{"ruleId":"163","severity":1,"message":"164","line":115,"column":40,"nodeType":"165","messageId":"166","endLine":115,"endColumn":42},{"ruleId":"148","severity":1,"message":"167","line":4,"column":8,"nodeType":"150","messageId":"151","endLine":4,"endColumn":14},{"ruleId":"148","severity":1,"message":"168","line":5,"column":10,"nodeType":"150","messageId":"151","endLine":5,"endColumn":25},{"ruleId":"148","severity":1,"message":"167","line":2,"column":8,"nodeType":"150","messageId":"151","endLine":2,"endColumn":14},{"ruleId":"148","severity":1,"message":"169","line":1,"column":28,"nodeType":"150","messageId":"151","endLine":1,"endColumn":34},{"ruleId":"170","severity":1,"message":"171","line":75,"column":8,"nodeType":"172","endLine":75,"endColumn":10,"suggestions":"173"},{"ruleId":"148","severity":1,"message":"174","line":76,"column":11,"nodeType":"150","messageId":"151","endLine":76,"endColumn":22},{"ruleId":"148","severity":1,"message":"175","line":77,"column":22,"nodeType":"150","messageId":"151","endLine":77,"endColumn":34},{"ruleId":"148","severity":1,"message":"176","line":78,"column":23,"nodeType":"150","messageId":"151","endLine":78,"endColumn":36},{"ruleId":"148","severity":1,"message":"177","line":79,"column":21,"nodeType":"150","messageId":"151","endLine":79,"endColumn":31},{"ruleId":"163","severity":1,"message":"164","line":42,"column":30,"nodeType":"165","messageId":"166","endLine":42,"endColumn":32},{"ruleId":"163","severity":1,"message":"164","line":45,"column":30,"nodeType":"165","messageId":"166","endLine":45,"endColumn":32},{"ruleId":"163","severity":1,"message":"164","line":48,"column":32,"nodeType":"165","messageId":"166","endLine":48,"endColumn":34},{"ruleId":"163","severity":1,"message":"164","line":51,"column":33,"nodeType":"165","messageId":"166","endLine":51,"endColumn":35},{"ruleId":"163","severity":1,"message":"164","line":64,"column":28,"nodeType":"165","messageId":"166","endLine":64,"endColumn":30},{"ruleId":"148","severity":1,"message":"178","line":2,"column":17,"nodeType":"150","messageId":"151","endLine":2,"endColumn":27},{"ruleId":"148","severity":1,"message":"179","line":49,"column":21,"nodeType":"150","messageId":"151","endLine":49,"endColumn":30},{"ruleId":"170","severity":1,"message":"180","line":52,"column":5,"nodeType":"181","endLine":52,"endColumn":20,"suggestions":"182"},{"ruleId":"163","severity":1,"message":"183","line":53,"column":28,"nodeType":"165","messageId":"166","endLine":53,"endColumn":30},{"ruleId":"184","severity":1,"message":"185","line":64,"column":25,"nodeType":"186","messageId":"187","endLine":64,"endColumn":46},{"ruleId":"148","severity":1,"message":"188","line":10,"column":8,"nodeType":"150","messageId":"151","endLine":10,"endColumn":11},{"ruleId":"148","severity":1,"message":"189","line":80,"column":12,"nodeType":"150","messageId":"151","endLine":80,"endColumn":28},{"ruleId":"163","severity":1,"message":"164","line":229,"column":46,"nodeType":"165","messageId":"166","endLine":229,"endColumn":48},{"ruleId":"163","severity":1,"message":"164","line":242,"column":41,"nodeType":"165","messageId":"166","endLine":242,"endColumn":43},{"ruleId":"163","severity":1,"message":"164","line":266,"column":45,"nodeType":"165","messageId":"166","endLine":266,"endColumn":47},{"ruleId":"148","severity":1,"message":"190","line":1,"column":10,"nodeType":"150","messageId":"151","endLine":1,"endColumn":18},"no-unused-vars","'computed' is defined but never used.","Identifier","unusedVar","'flow' is defined but never used.","no-native-reassign",["191"],"no-negated-in-lhs",["192"],"'Component' is defined but never used.","'useEffect' is defined but never used.","'open' is assigned a value but never used.","'setOpen' is assigned a value but never used.","'cookies' is assigned a value but never used.","'setHasCookie' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Member' is defined but never used.","'CookiesProvider' is defined but never used.","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dictionaryStore'. Either include it or remove the dependency array.","ArrayExpression",["193"],"'memberStore' is assigned a value but never used.","'setInputText' is assigned a value but never used.","'setOutputText' is assigned a value but never used.","'setRanking' is assigned a value but never used.","'useContext' is defined but never used.","'setCookie' is assigned a value but never used.","React Hook useEffect contains a call to 'setHasCookie'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [cookies] as a second argument to the useEffect Hook.","MemberExpression",["194"],"Expected '!==' and instead saw '!='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Box' is defined but never used.","'outputTextLength' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [dictionaryStore]",{"range":"199","text":"200"},"Add dependencies array: [cookies]",{"range":"201","text":"202"},[2218,2220],"[dictionaryStore]",[1700,1700],", [cookies]"]