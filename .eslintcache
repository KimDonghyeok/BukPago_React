[{"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\index.js":"1","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\WriteView.js":"2","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Dictionary.js":"3","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TranslationView.js":"4","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TranslationStore.js":"5","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TranslationController.js":"6","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\DictionaryView.js":"7"},{"size":302,"mtime":1616817541585,"results":"8","hashOfConfig":"9"},{"size":3665,"mtime":1616817541583,"results":"10","hashOfConfig":"9"},{"size":307,"mtime":1616817541587,"results":"11","hashOfConfig":"9"},{"size":9939,"mtime":1617095091083,"results":"12","hashOfConfig":"9"},{"size":836,"mtime":1617094389373,"results":"13","hashOfConfig":"9"},{"size":688,"mtime":1617095030877,"results":"14","hashOfConfig":"9"},{"size":3177,"mtime":1617096860954,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jpw19m",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\index.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\WriteView.js",["31","32","33"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Dictionary.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TranslationView.js",["34","35"],"import React,  {  useState } from 'react'\r\nimport { Typography, } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TranslationStore from '../stores/TranslationStore';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '1%',\r\n    },\r\n    paper: {\r\n        marginTop: '1%',\r\n        width: '35%',\r\n        height: '50%',\r\n        position : 'relative'\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        float: 'right',\r\n    },\r\n    box: {\r\n        //display: 'flex',\r\n        //flex: 1,\r\n        //flexDirection: 'row-reverse',\r\n    },\r\n    textLength: {\r\n        position: 'absolute',\r\n        right: '2%',\r\n        bottom: '10%',\r\n    },\r\n    clearButton: {\r\n        position: 'absolute',\r\n        right: '0%',\r\n        top: '0%',\r\n    },\r\n    bukPaper : {\r\n        textAlign : \"center\",\r\n        width : '10%',\r\n        backgroundColor : '#ffd6d6'\r\n    },\r\n    namPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#d6f8ff',\r\n    },\r\n    upDownBtn: {\r\n        float: 'left'\r\n    }\r\n});\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputTextLength, setInputTextLength] = useState(0);\r\n    const [outputText, setOutputText] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n    const [translateState, setTranslateState] = useState(false)\r\n    const maxTextLength = 3000;\r\n    const translationStore = React.useContext(TranslationStore.context);\r\n    const onChange = (e) => {\r\n        const str = e.target.value;\r\n        setTranslateState(false);\r\n        if (str.length <= maxTextLength) {\r\n            setInputText(str);\r\n            setInputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const textClear = () => {\r\n        setInputText('');\r\n        setInputTextLength(0);\r\n        setTranslateState(false);\r\n        setOutputText('');\r\n    };\r\n\r\n    const copyText = () => {\r\n        navigator.clipboard.writeText(outputText);\r\n        setContent('복사가 완료되었습니다.');\r\n        setSeverity('success');\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const transLike = () => {\r\n        translationStore.transLike(true,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const transDislike = () => {\r\n        translationStore.transLike(false,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const translate = () => {\r\n        translationStore.translate(inputText).then(result => \r\n            {\r\n                setOutputText(result)\r\n                setTranslateState(true)\r\n            }\r\n        ).catch( err => { console.log(err);})\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root} >\r\n            <div  className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    북한어 번역\r\n                </Typography>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid\r\n                    className = {classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Paper className={classes.bukPaper}>\r\n                        <Typography variant=\"h5\">북한어</Typography>\r\n                    </Paper>\r\n                    <Paper className={classes.namPaper}>\r\n                        <Typography variant=\"h5\">남한어</Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            autoFocus\r\n                            rows={17}\r\n                            onChange={onChange}\r\n                            value={inputText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Typography className={classes.textLength}>\r\n                            {inputTextLength} / {maxTextLength}\r\n                        </Typography>\r\n                        <Box className={classes.box}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                onClick={translate}\r\n                                color=\"primary\"\r\n                            >\r\n                                번역하기\r\n                            </Button>\r\n                            {inputTextLength == 0 ? null : (\r\n                                <IconButton\r\n                                    className={classes.clearButton}\r\n                                    variant=\"contained\"\r\n                                    onClick={textClear}\r\n                                >\r\n                                    <ClearIcon></ClearIcon>\r\n                                </IconButton>\r\n                            )}\r\n                        </Box>\r\n                    </Paper>\r\n\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            rows={17}\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                            value={outputText}\r\n                        />\r\n                        <Box className={classes.box}>\r\n                            {translateState == false ? null : \r\n                                (\r\n                                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transLike}\r\n                                        >\r\n                                            <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                        </Button>\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transDislike}\r\n                                        >\r\n                                            <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                )\r\n                            }\r\n                           \r\n                            \r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                color=\"primary\"\r\n                                onClick={copyText}\r\n                            >\r\n                                <FileCopyIcon></FileCopyIcon>\r\n                            </Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TranslationStore.js",["36"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TranslationController.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\DictionaryView.js",["37"],{"ruleId":"38","severity":1,"message":"39","line":1,"column":17,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"38","severity":1,"message":"42","line":8,"column":8,"nodeType":"40","messageId":"41","endLine":8,"endColumn":13},{"ruleId":"43","severity":1,"message":"44","line":23,"column":9,"nodeType":"45","messageId":"46","endLine":23,"endColumn":18},{"ruleId":"47","severity":1,"message":"48","line":194,"column":46,"nodeType":"49","messageId":"46","endLine":194,"endColumn":48},{"ruleId":"47","severity":1,"message":"48","line":219,"column":45,"nodeType":"49","messageId":"46","endLine":219,"endColumn":47},{"ruleId":"50","severity":2,"message":"51","line":25,"column":16,"nodeType":"40","messageId":"52","endLine":25,"endColumn":32},{"ruleId":"53","severity":1,"message":"54","line":71,"column":8,"nodeType":"55","endLine":71,"endColumn":10,"suggestions":"56"},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","no-dupe-keys","Duplicate key 'marginTop'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-undef","'requestTranslike' is not defined.","undef","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dictionaryStore'. Either include it or remove the dependency array.","ArrayExpression",["57"],{"desc":"58","fix":"59"},"Update the dependencies array to be: [dictionaryStore]",{"range":"60","text":"61"},[1924,1926],"[dictionaryStore]"]