[{"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\index.js":"1","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\WriteView.js":"2","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Dictionary.js":"3","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TranslationView.js":"4","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TranslationStore.js":"5","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TranslationController.js":"6","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\DictionaryView.js":"7","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\HomeLayout.js":"8","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TrainView.js":"9","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\App.js":"10","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\LoginController.js":"11","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\FreeboardView.js":"12"},{"size":302,"mtime":1616817541585,"results":"13","hashOfConfig":"14"},{"size":3665,"mtime":1616817541583,"results":"15","hashOfConfig":"14"},{"size":307,"mtime":1616817541587,"results":"16","hashOfConfig":"14"},{"size":9939,"mtime":1617095091083,"results":"17","hashOfConfig":"14"},{"size":904,"mtime":1617107808011,"results":"18","hashOfConfig":"14"},{"size":688,"mtime":1617095030877,"results":"19","hashOfConfig":"14"},{"size":3177,"mtime":1617096860954,"results":"20","hashOfConfig":"14"},{"size":3670,"mtime":1617106149720,"results":"21","hashOfConfig":"14"},{"size":4676,"mtime":1617172727271,"results":"22","hashOfConfig":"14"},{"size":2284,"mtime":1617106261566,"results":"23","hashOfConfig":"14"},{"size":306,"mtime":1616817541584,"results":"24","hashOfConfig":"14"},{"size":10806,"mtime":1616817541581,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1jpw19m",{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\index.js",[],["55","56"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\WriteView.js",["57","58","59"],"import React, { Component, useContext, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport PostStore from '../stores/PostStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    paper: {\r\n        marginTop: '5%',\r\n        width: '77%',\r\n        height: '80%',\r\n        padding: '20px',\r\n        paddingLeft: '30px',\r\n        marginTop: '30px',\r\n        marginLeft: '50px',\r\n    },\r\n    title_text: {\r\n        marginLeft: '10%',\r\n        width: '70%',\r\n        border: 'groove',\r\n        borderBottom: 'solid 1px #ababab',\r\n        fontSize: '18px',\r\n        fontWeight: 'bold',\r\n    },\r\n    content_text: {\r\n        marginLeft: '10%',\r\n        width: '70%',\r\n        resize: 'none',\r\n        border: 'groove',\r\n    },\r\n    box: {\r\n        width: '80%',\r\n    },\r\n    button: {\r\n        float: 'right',\r\n    },\r\n});\r\n\r\nexport default function WriteView() {\r\n    const classes = useStyles();\r\n    const [titleText, setTitleText] = useState('');\r\n    const [contentText, setContentText] = useState('');\r\n    const postStore = useContext(PostStore.context);\r\n    const handleChangeTitle = (e) => {\r\n        setTitleText(e.target.value);\r\n    };\r\n    const handleChangeContent = (e) => {\r\n        setContentText(e.target.value);\r\n    };\r\n    const handleWrite = (e) => {\r\n        if (titleText === '') {\r\n            return alert('제목을 입력하세요.');\r\n        } else if (contentText === '') {\r\n            return alert('내용을 입력하세요.');\r\n        }\r\n        postStore.addPost(titleText, contentText).then((res) => {\r\n            alert('성공적으로 게시되었습니다.');\r\n        });\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <div>\r\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\">\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.title_text}\r\n                            id=\"title\" // 식별값\r\n                            rows={1}\r\n                            placeholder=\"제목\"\r\n                            onChange={handleChangeTitle}\r\n                            value={titleText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <TextField\r\n                            className={classes.content_text}\r\n                            id=\"content\"\r\n                            multiline // 줄바꿈 기능\r\n                            rows={30}\r\n                            placeholder=\"내용\"\r\n                            onChange={handleChangeContent}\r\n                            value={contentText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Box className={classes.box}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={handleWrite}\r\n                            >\r\n                                등록\r\n                            </Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\models\\Dictionary.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TranslationView.js",["60","61"],"import React,  {  useState } from 'react'\r\nimport { Typography, } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TranslationStore from '../stores/TranslationStore';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '1%',\r\n    },\r\n    paper: {\r\n        marginTop: '1%',\r\n        width: '35%',\r\n        height: '50%',\r\n        position : 'relative'\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        float: 'right',\r\n    },\r\n    box: {\r\n        //display: 'flex',\r\n        //flex: 1,\r\n        //flexDirection: 'row-reverse',\r\n    },\r\n    textLength: {\r\n        position: 'absolute',\r\n        right: '2%',\r\n        bottom: '10%',\r\n    },\r\n    clearButton: {\r\n        position: 'absolute',\r\n        right: '0%',\r\n        top: '0%',\r\n    },\r\n    bukPaper : {\r\n        textAlign : \"center\",\r\n        width : '10%',\r\n        backgroundColor : '#ffd6d6'\r\n    },\r\n    namPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#d6f8ff',\r\n    },\r\n    upDownBtn: {\r\n        float: 'left'\r\n    }\r\n});\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputTextLength, setInputTextLength] = useState(0);\r\n    const [outputText, setOutputText] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n    const [translateState, setTranslateState] = useState(false)\r\n    const maxTextLength = 3000;\r\n    const translationStore = React.useContext(TranslationStore.context);\r\n    const onChange = (e) => {\r\n        const str = e.target.value;\r\n        setTranslateState(false);\r\n        if (str.length <= maxTextLength) {\r\n            setInputText(str);\r\n            setInputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const textClear = () => {\r\n        setInputText('');\r\n        setInputTextLength(0);\r\n        setTranslateState(false);\r\n        setOutputText('');\r\n    };\r\n\r\n    const copyText = () => {\r\n        navigator.clipboard.writeText(outputText);\r\n        setContent('복사가 완료되었습니다.');\r\n        setSeverity('success');\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const transLike = () => {\r\n        translationStore.transLike(true,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const transDislike = () => {\r\n        translationStore.transLike(false,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const translate = () => {\r\n        translationStore.translate(inputText).then(result => \r\n            {\r\n                setOutputText(result)\r\n                setTranslateState(true)\r\n            }\r\n        ).catch( err => { console.log(err);})\r\n    }\r\n\r\n    return(\r\n        <div className={classes.root} >\r\n            <div  className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    북한어 번역\r\n                </Typography>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid\r\n                    className = {classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Paper className={classes.bukPaper}>\r\n                        <Typography variant=\"h5\">북한어</Typography>\r\n                    </Paper>\r\n                    <Paper className={classes.namPaper}>\r\n                        <Typography variant=\"h5\">남한어</Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            autoFocus\r\n                            rows={17}\r\n                            onChange={onChange}\r\n                            value={inputText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Typography className={classes.textLength}>\r\n                            {inputTextLength} / {maxTextLength}\r\n                        </Typography>\r\n                        <Box className={classes.box}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                onClick={translate}\r\n                                color=\"primary\"\r\n                            >\r\n                                번역하기\r\n                            </Button>\r\n                            {inputTextLength == 0 ? null : (\r\n                                <IconButton\r\n                                    className={classes.clearButton}\r\n                                    variant=\"contained\"\r\n                                    onClick={textClear}\r\n                                >\r\n                                    <ClearIcon></ClearIcon>\r\n                                </IconButton>\r\n                            )}\r\n                        </Box>\r\n                    </Paper>\r\n\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            rows={17}\r\n                            variant=\"outlined\"\r\n                            InputProps={{\r\n                                readOnly: true,\r\n                            }}\r\n                            value={outputText}\r\n                        />\r\n                        <Box className={classes.box}>\r\n                            {translateState == false ? null : \r\n                                (\r\n                                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transLike}\r\n                                        >\r\n                                            <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                        </Button>\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transDislike}\r\n                                        >\r\n                                            <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                )\r\n                            }\r\n                           \r\n                            \r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                color=\"primary\"\r\n                                onClick={copyText}\r\n                            >\r\n                                <FileCopyIcon></FileCopyIcon>\r\n                            </Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","E:\\공부\\2021-1\\창융\\BukPago_React\\src\\stores\\TranslationStore.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\TranslationController.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\DictionaryView.js",["62"],"import React, {useEffect, useState} from 'react'\r\nimport {  Typography, } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DictionaryStore from '../stores/DictionaryStore';\r\n\r\nvar elem = (document.compatMode === \"CSS1Compat\") ? \r\n    document.documentElement :\r\n    document.body;\r\n\r\nvar height = elem.clientHeight;\r\nvar width = elem.clientWidth;\r\n\r\n\r\nfunction getWidth(tableRate,rate){\r\n    return width*tableRate*rate\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root : {\r\n        width : '99%',\r\n        height : '100%',\r\n        display : 'inline-block',\r\n    },\r\n    title : {\r\n        paddingTop : '2%',\r\n        textAlign : \"center\",\r\n        fontWeight : 600,\r\n        paddingBottom : '1%'\r\n    },\r\n    table : {\r\n        paddingTop : '1%',\r\n        height: height*0.6,\r\n        width: '75%'\r\n    },\r\n    search : {\r\n        width: '50%'\r\n    }\r\n})\r\n\r\nconst columns = [\r\n    {field: 'id', headerName : '북한어', width: getWidth(0.75, 2/9)},\r\n    {field: 'south', headerName : '남한어', width: getWidth(0.75, 2/9) },\r\n    {field: 'mean', headerName : '뜻', width: getWidth(0.75, 5/10)}\r\n]\r\n\r\n\r\nexport default function DictionaryView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const onChange = (e) => {\r\n        const str = e.target.value;\r\n        setInputText(str);\r\n    };\r\n\r\n    const search = () => {\r\n        dictionaryStore.getDictionary(inputText);\r\n    }\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            search()\r\n        }\r\n    }\r\n    \r\n    const dictionaryStore = React.useContext(DictionaryStore.context)\r\n    useEffect(() => {\r\n        dictionaryStore.getDictionary();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    북한말 사전\r\n                </Typography>\r\n                <div>\r\n                    <TextField \r\n                        className = {classes.search} \r\n                        id=\"standard-search\" \r\n                        type=\"search\" \r\n                        onKeyPress={handleKeyDown}\r\n                        onChange={onChange}    \r\n                    />\r\n                    <SearchIcon onClick={search}/>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            <div className = {classes.content}>\r\n                <Grid\r\n                    className = {classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <div className = {classes.table}>\r\n                        <DataGrid columns = {columns} rows = {dictionaryStore.dictionarys} pageSize={8} />\r\n                    </div>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}",["63","64"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\HomeLayout.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\TrainView.js",["65","66","67","68"],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\App.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\controllers\\LoginController.js",[],"E:\\공부\\2021-1\\창융\\BukPago_React\\src\\components\\FreeboardView.js",["69","70","71","72","73","74","75","76","77","78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"88","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":13},{"ruleId":"89","severity":1,"message":"90","line":23,"column":9,"nodeType":"91","messageId":"92","endLine":23,"endColumn":18},{"ruleId":"93","severity":1,"message":"94","line":194,"column":46,"nodeType":"95","messageId":"92","endLine":194,"endColumn":48},{"ruleId":"93","severity":1,"message":"94","line":219,"column":45,"nodeType":"95","messageId":"92","endLine":219,"endColumn":47},{"ruleId":"96","severity":1,"message":"97","line":71,"column":8,"nodeType":"98","endLine":71,"endColumn":10,"suggestions":"99"},{"ruleId":"80","replacedBy":"100"},{"ruleId":"82","replacedBy":"101"},{"ruleId":"84","severity":1,"message":"102","line":1,"column":17,"nodeType":"86","messageId":"87","endLine":1,"endColumn":26},{"ruleId":"84","severity":1,"message":"103","line":49,"column":22,"nodeType":"86","messageId":"87","endLine":49,"endColumn":34},{"ruleId":"84","severity":1,"message":"104","line":50,"column":23,"nodeType":"86","messageId":"87","endLine":50,"endColumn":36},{"ruleId":"84","severity":1,"message":"105","line":51,"column":11,"nodeType":"86","messageId":"87","endLine":51,"endColumn":27},{"ruleId":"84","severity":1,"message":"85","line":1,"column":39,"nodeType":"86","messageId":"87","endLine":1,"endColumn":48},{"ruleId":"84","severity":1,"message":"106","line":2,"column":10,"nodeType":"86","messageId":"87","endLine":2,"endColumn":16},{"ruleId":"84","severity":1,"message":"107","line":2,"column":18,"nodeType":"86","messageId":"87","endLine":2,"endColumn":23},{"ruleId":"84","severity":1,"message":"108","line":8,"column":8,"nodeType":"86","messageId":"87","endLine":8,"endColumn":16},{"ruleId":"84","severity":1,"message":"109","line":12,"column":8,"nodeType":"86","messageId":"87","endLine":12,"endColumn":17},{"ruleId":"84","severity":1,"message":"110","line":19,"column":8,"nodeType":"86","messageId":"87","endLine":19,"endColumn":13},{"ruleId":"84","severity":1,"message":"111","line":20,"column":8,"nodeType":"86","messageId":"87","endLine":20,"endColumn":12},{"ruleId":"84","severity":1,"message":"112","line":21,"column":10,"nodeType":"86","messageId":"87","endLine":21,"endColumn":18},{"ruleId":"84","severity":1,"message":"113","line":103,"column":7,"nodeType":"86","messageId":"87","endLine":103,"endColumn":11},{"ruleId":"84","severity":1,"message":"114","line":185,"column":9,"nodeType":"86","messageId":"87","endLine":185,"endColumn":12},{"ruleId":"84","severity":1,"message":"115","line":186,"column":9,"nodeType":"86","messageId":"87","endLine":186,"endColumn":14},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","no-dupe-keys","Duplicate key 'marginTop'.","ObjectExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dictionaryStore'. Either include it or remove the dependency array.","ArrayExpression",["118"],["116"],["117"],"'useEffect' is defined but never used.","'setInputText' is assigned a value but never used.","'setOutputText' is assigned a value but never used.","'translationStore' is assigned a value but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'EditIcon' is defined but never used.","'TableBody' is defined but never used.","'Paper' is defined but never used.","'Grid' is defined but never used.","'DataGrid' is defined but never used.","'rows' is assigned a value but never used.","'tmp' is assigned a value but never used.","'datas' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [dictionaryStore]",{"range":"121","text":"122"},[1924,1926],"[dictionaryStore]"]