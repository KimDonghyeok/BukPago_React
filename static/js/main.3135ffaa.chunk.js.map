{"version":3,"sources":["HomeLayout.js","controllers/TranslationController.js","stores/TranslationStore.js","controllers/TrainController.js","stores/TrainStore.js","components/TranslationView.js","models/Member.js","controllers/MemberController.js","stores/MemberStore.js","components/SignUpView.js","components/SignInView.js","models/Dictionary.js","controllers/DictionaryController.js","stores/DictionaryStore.js","components/DictionaryView.js","components/TrainView.js","stores/FileTranslationStore.js","stores/RootStore.js","stores/Context.js","components/CustomCheckboxTable.js","components/FileTranslationView.js","App.js","reportWebVitals.js","index.js"],"names":["useStyle","makeStyles","theme","root","width","height","appBar","backgroundColor","contentGrid","paddingLeft","accountGrid","title","fontSize","fontWeight","contentArea","paddingTop","minHeight","minWidth","position","link","textDecoration","accountIcon","float","HomeLayout","props","children","useState","classes","removeCookie","cookies","setHasCookie","hasCookie","className","AppBar","Toolbar","toolBar","alignItems","Grid","container","direction","justify","to","pathname","style","Button","size","variant","IconButton","color","onClick","_NK","a","axios","get","params","NK","withCredentials","catch","error","then","res","data","result","TranslationStore","this","context","createContext","northText","requestTranslate","instance","observable","action","getInstance","requestTranslike","_isLike","_SK","post","isLike","SK","TrainStore","inputText","outputText","requestTransLike","requestGetTestCase","requestTransOffer","useStyles","display","textAlign","content","paper","marginTop","textField","button","box","textLength","right","bottom","clearButton","top","bukPaper","namPaper","upDownBtn","TranslationView","setInputText","inputTextLength","setInputTextLength","setOutputTextLength","setOutputText","open","setOpen","setContent","severity","setSeverity","translateState","setTranslateState","maxTextLength","translationStore","React","useContext","trainStore","handleClose","Typography","grid","Paper","TextField","id","multiline","autoFocus","rows","onChange","e","str","target","value","length","Box","disableRipple","translate","err","console","log","InputProps","readOnly","ButtonGroup","aria-label","transLike","transOffer","navigator","clipboard","writeText","Snackbar","autoHideDuration","onClose","Alert","Member","pw","name","email","isAdmin","evaluationCount","_id","_pw","member","MemberStore","newMember","requestSignUp","requestLogin","requestGetRanker","spacing","flexDirection","avatar","margin","palette","secondary","main","form","submit","SignUpView","memberStore","useRef","Container","component","maxWidth","CssBaseline","noValidate","item","xs","required","fullWidth","label","autoComplete","inputRef","type","preventDefault","current","register","status","Link","href","SignIn","Avatar","FormControlLabel","control","Checkbox","login","Dictionary","north","south","mean","_query","query","warn","tmp","Object","keys","map","key","index","push","get_dic","DictionaryStore","requestGetDictionary","dictionarys","elem","document","compatMode","documentElement","body","clientHeight","clientWidth","getWidth","tableRate","rate","paddingBottom","table","search","columns","field","headerName","DictionaryView","dictionaryStore","getDictionary","useEffect","onKeyPress","event","pageSize","trainText","mainContent","testCard","marginLeft","card","padding","pass","marginRight","cardGrid","rankingCard","mainGrid","ranking","rankingNum","Card","CardContent","CardActions","Tooltip","disableHoverListener","idx","FileTranslationStore","originalFiles","translatedFiles","fileCount","makeAutoObservable","uploadFile","files","file","reader","FileReader","onload","fileInfo","readAsText","RootStore","StoreContext","StoreProvider","Provider","useCustomTableStyles","toolbarRoot","toolbarTitle","flex","uploadButton","input","highlight","lighten","headerRoot","idCell","nameCell","sizeCell","observer","selected","setSelected","clsx","numSelected","endIcon","multiple","accept","TableContainer","Table","TableHead","TableRow","TableCell","indeterminate","checked","newSelected","forEach","align","TableBody","isItemSelected","indexOf","isSelected","hover","selectedIndex","concat","slice","handleClick","role","useBodyStyles","leftBox","rightBox","middleBox","columFlexBox","justifyContent","alignCenter","translateBtn","FileTranslationView","createMuiTheme","primary","dark","light","contrastText","overrides","MuiButton","App","useCookies","undefined","path","SignInView","exact","TrainView","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3135ffaa.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    appBar: {\r\n        backgroundColor: '#58a0d1',\r\n    },\r\n    contentGrid: {\r\n        paddingLeft: '3%',\r\n        width: '40%',\r\n    },\r\n    accountGrid: {\r\n        width: '60%',\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontWeight: 600,\r\n    },\r\n    contentArea: {\r\n        paddingTop: '5%',\r\n        width: '100%',\r\n        height: '100%',\r\n        minHeight: '80%',\r\n        minWidth: '100%',\r\n        position: 'sticky',\r\n    },\r\n    link: {\r\n        textDecoration: 'none',\r\n    },\r\n    accountIcon: {\r\n        float: 'right',\r\n    },\r\n}));\r\n\r\nfunction HomeLayout(props) {\r\n    const { children } = props;\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyle();\r\n    const cookies = props.cookies;\r\n    const setHasCookie = props.setHasCookie;\r\n    const removeCookie = props.removeCookie;\r\n    const hasCookie = props.hasCookie;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar className={classes.toolBar} alignItems=\"flex-end\" position=\"fixed\">\r\n                    <Grid\r\n                        className={classes.contentGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-between\"\r\n                        alignItems=\"flex-start\"\r\n                    >\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                北파고\r\n                            </Button>\r\n                        </Link>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago/file-translate',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                파일번역\r\n                            </Button>\r\n                        </Link>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago/dictionary',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                북한말 사전\r\n                            </Button>\r\n                        </Link>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/buk-pago/train',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} size=\"large\">\r\n                                北파고 Train\r\n                            </Button>\r\n                        </Link>\r\n                    </Grid>\r\n                    <Grid\r\n                        className={classes.accountGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"flex-end\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <div className={classes.accountIcon}>\r\n                            {hasCookie == false ? (\r\n                                <div>\r\n                                    <Link\r\n                                        to={{\r\n                                            pathname: '/buk-pago/signIn',\r\n                                        }}\r\n                                        style={{ textDecoration: 'none' }}\r\n                                    >\r\n                                        <Button className={classes.title} variant=\"contained\">\r\n                                            로그인\r\n                                        </Button>\r\n                                    </Link>\r\n                                </div>\r\n                            ) : (\r\n                                <div>\r\n                                    <IconButton>\r\n                                        <ExitToAppIcon color=\"secondary\" fontSize=\"large\" />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        className={classes.accountIcon}\r\n                                        onClick={removeCookie}\r\n                                    >\r\n                                        <AccountCircle color=\"secondary\" fontSize=\"large\" />\r\n                                    </IconButton>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.contentArea}>{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeLayout;\r\n","import axios from 'axios'\r\n\r\nexport default async function requestTranslate(_NK) {\r\n    return await axios.get(\r\n        '/api/translator',{params : {NK : _NK}}, {withCredentials : true}\r\n    ).catch(error => {return error}).then(res => {\r\n        if(res.data != null){\r\n            return res.data.result\r\n        }\r\n    })\r\n}\r\n\r\n","import { observable, action } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestTranslate from '../controllers/TranslationController';\r\n\r\n\r\nclass TranslationStore {\r\n    @observable translates = [];\r\n    static instance = null;\r\n\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n    static getInstance() {\r\n        if (!TranslationStore.instance) this.instance = new TranslationStore();\r\n        return TranslationStore.instance;\r\n    }\r\n\r\n    @action\r\n    translate(northText) {\r\n        return requestTranslate(northText)\r\n    }\r\n\r\n}\r\nexport default TranslationStore = TranslationStore.getInstance();\r\n","import axios from 'axios'\r\nimport Train from '../models/Train'\r\n\r\nexport default async function requestTranslike(_isLike, _NK, _SK) {\r\n    return await axios.post(\r\n        '/api/evaluation', {params : {isLike : _isLike, NK: _NK, SK : _SK}}, {withCredentials : true}\r\n    ).catch(error => {return error}).then(res => {\r\n        return res.data\r\n    })\r\n}\r\n\r\n\r\nexport async function requestGetTestCase() {\r\n    return await axios.get(\r\n        'api/evaluation', {withCredentials : true}\r\n    ).catch(error => {return error}).then(result => {\r\n        var data = [];\r\n        if(result.data != null){ // 5-2\r\n            var tmp = result.data\r\n            Object.keys(tmp).map((key,index) => (\r\n                data.push(new Train(tmp[key]['NK'], tmp[key]['SK']\r\n                ))\r\n            ))\r\n            return data\r\n        }\r\n        return []\r\n    })\r\n}\r\n\r\nexport async function requestTransOffer( _NK, _SK) {\r\n    return await axios.post(\r\n        'api/evaluation/make', {params : { NK: _NK, SK : _SK}}, {withCredentials : true}\r\n    ).catch(error => {return error}).then(res => {\r\n        return res.data\r\n    })\r\n}","import { observable, action } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestGetTestCase from '../controllers/TrainController';\r\nimport requestTransLike from '../controllers/TrainController';\r\nimport requestTransOffer from '../controllers/TrainController';\r\n\r\n\r\nclass TrainStore {\r\n    @observable trains = [];\r\n    static instance = null;\r\n\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!TrainStore.instance) this.instance = new TrainStore();\r\n        return TrainStore.instance;\r\n    }\r\n\r\n    @action\r\n    transLike(isLike, inputText, outputText){\r\n        \r\n        return requestTransLike(isLike, inputText, outputText).then(res => {\r\n            return res\r\n        })\r\n    }\r\n\r\n    @action\r\n    getTestCase(){\r\n        return requestGetTestCase().then(result=>{\r\n            return result\r\n        })\r\n    }\r\n\r\n    @action\r\n    transOffer(inputText,outputText){\r\n        return requestTransOffer(inputText,outputText).then(res => {\r\n            return res\r\n        })\r\n    }\r\n}\r\n\r\nexport default TrainStore = TrainStore.getInstance();\r\n","import React, { useState } from 'react';\r\nimport { Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TranslationStore from '../stores/TranslationStore';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TrainStore from '../stores/TrainStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '1%',\r\n    },\r\n    paper: {\r\n        marginTop: '1%',\r\n        width: '35%',\r\n        height: '50%',\r\n        position: 'relative',\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        float: 'right',\r\n    },\r\n    box: {\r\n        //display: 'flex',\r\n        //flex: 1,\r\n        //flexDirection: 'row-reverse',\r\n    },\r\n    textLength: {\r\n        position: 'absolute',\r\n        right: '2%',\r\n        bottom: '10%',\r\n    },\r\n    clearButton: {\r\n        position: 'absolute',\r\n        right: '0%',\r\n        top: '0%',\r\n    },\r\n    bukPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#ffd6d6',\r\n    },\r\n    namPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#d6f8ff',\r\n    },\r\n    upDownBtn: {\r\n        float: 'left',\r\n    },\r\n});\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputTextLength, setInputTextLength] = useState(0);\r\n    const [outputTextLength, setOutputTextLength] = useState(0);\r\n    const [outputText, setOutputText] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n    const [translateState, setTranslateState] = useState(false);\r\n    const maxTextLength = 3000;\r\n    const translationStore = React.useContext(TranslationStore.context);\r\n    const trainStore = React.useContext(TrainStore.context);\r\n    const onInputChange = (e) => {\r\n        const str = e.target.value;\r\n        setTranslateState(false);\r\n        if (str.length <= maxTextLength) {\r\n            setInputText(str);\r\n            setInputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const onOutputChange = (e) => {\r\n        const str = e.target.value;\r\n        if (str.length <= maxTextLength) {\r\n            setOutputText(str);\r\n            setOutputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n    const textClear = () => {\r\n        setInputText('');\r\n        setInputTextLength(0);\r\n        setTranslateState(false);\r\n        setOutputText('');\r\n    };\r\n\r\n    const copyText = () => {\r\n        navigator.clipboard.writeText(outputText);\r\n        setContent('복사가 완료되었습니다.');\r\n        setSeverity('success');\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const transLike = () => {\r\n        trainStore\r\n            .transLike(true, inputText, outputText)\r\n            .then((result) => {\r\n                setContent('피드백 감사합니다! :)');\r\n                setSeverity('success');\r\n                setOpen(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const transDislike = () => {\r\n        trainStore\r\n            .transLike(false, inputText, outputText)\r\n            .then((result) => {\r\n                setContent('피드백 감사합니다! :)');\r\n                setSeverity('success');\r\n                setOpen(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const translate = () => {\r\n        translationStore\r\n            .translate(inputText)\r\n            .then((result) => {\r\n                setOutputText(result);\r\n                setTranslateState(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n\r\n    const transOffer = () => {\r\n        trainStore\r\n            .transOffer(inputText, outputText)\r\n            .then((result) => {\r\n                setContent('피드백 감사합니다! :)');\r\n                setSeverity('success');\r\n                setOpen(true);\r\n            })\r\n            .catch((err) => {\r\n                console.log(err);\r\n            });\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.title}>\r\n                <Typography className={classes.title} variant=\"h3\">\r\n                    북한어 번역\r\n                </Typography>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid\r\n                    className={classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Paper className={classes.bukPaper}>\r\n                        <Typography variant=\"h5\">북한어</Typography>\r\n                    </Paper>\r\n                    <Paper className={classes.namPaper}>\r\n                        <Typography variant=\"h5\">남한어</Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            autoFocus\r\n                            rows={17}\r\n                            onChange={onInputChange}\r\n                            value={inputText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Typography className={classes.textLength}>\r\n                            {inputTextLength} / {maxTextLength}\r\n                        </Typography>\r\n                        <Box className={classes.box}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                onClick={translate}\r\n                                color=\"primary\"\r\n                            >\r\n                                번역하기\r\n                            </Button>\r\n                            {inputTextLength == 0 ? null : (\r\n                                <IconButton\r\n                                    className={classes.clearButton}\r\n                                    variant=\"contained\"\r\n                                    onClick={textClear}\r\n                                >\r\n                                    <ClearIcon></ClearIcon>\r\n                                </IconButton>\r\n                            )}\r\n                        </Box>\r\n                    </Paper>\r\n\r\n                    <Paper className={classes.paper}>\r\n                        {translateState == false ? (\r\n                            <TextField\r\n                                className={classes.textField}\r\n                                id=\"outlined-multiline-static\"\r\n                                multiline\r\n                                rows={17}\r\n                                variant=\"outlined\"\r\n                                InputProps={{\r\n                                    readOnly: true,\r\n                                }}\r\n                                value={outputText}\r\n                            />\r\n                        ) : (\r\n                            <TextField\r\n                                className={classes.textField}\r\n                                id=\"outlined-multiline-static\"\r\n                                multiline\r\n                                rows={17}\r\n                                variant=\"outlined\"\r\n                                value={outputText}\r\n                                onChange={onOutputChange}\r\n                            />\r\n                        )}\r\n                        <Box className={classes.box}>\r\n                            {translateState == false ? null : (\r\n                                <ButtonGroup\r\n                                    color=\"primary\"\r\n                                    aria-label=\"outlined primary button group\"\r\n                                >\r\n                                    <Button\r\n                                        className={classes.upDownBtn}\r\n                                        disableRipple\r\n                                        color=\"primary\"\r\n                                        onClick={transLike}\r\n                                    >\r\n                                        <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={classes.upDownBtn}\r\n                                        disableRipple\r\n                                        color=\"primary\"\r\n                                        onClick={transDislike}\r\n                                    >\r\n                                        <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                    </Button>\r\n                                    <Button\r\n                                        className={classes.upDownBtn}\r\n                                        disableRipple\r\n                                        color=\"primary\"\r\n                                        onClick={transOffer}\r\n                                    >\r\n                                        수정하기\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                            )}\r\n\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                color=\"primary\"\r\n                                onClick={copyText}\r\n                            >\r\n                                <FileCopyIcon></FileCopyIcon>\r\n                            </Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export default class Member {\r\n    constructor(id,pw,name,email,isAdmin,evaluationCount) {\r\n        this.id = id\r\n        this.pw = pw\r\n        this.name = name\r\n        this.email = email\r\n        this.isAdmin = isAdmin\r\n        this.evaluationCount = evaluationCount\r\n    }\r\n}","import axios from 'axios';\r\nimport Member from '../models/Member';\r\n\r\nexport default async function requestLogin(_id, _pw) {\r\n    return await axios\r\n        .post('/api/login', { id: _id, pw: _pw })\r\n        .then((res) => {\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err;\r\n        });\r\n}\r\n\r\nexport async function requestSignUp(member) {\r\n    return await axios\r\n        .post('/api/signUp', {\r\n            id: member.id,\r\n            pw: member.pw,\r\n            name: member.name,\r\n            email: member.email,\r\n        })\r\n        .then((res) => {\r\n            console.log(res);\r\n            return res;\r\n        })\r\n        .catch((err) => {\r\n            return err;\r\n        });\r\n}\r\n\r\nexport async function requestGetRanker() {\r\n    return await axios\r\n        .get('/api/rank')\r\n        .catch((error) => {\r\n            return error;\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        });\r\n}\r\n","import { action, observable } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestLogin, { requestSignUp, requestGetRanker } from '../controllers/MemberController';\r\nimport Member from '../models/Member';\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\nclass MemberStore {\r\n    @observable members = [];\r\n    static instance = null;\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n    static getInstance() {\r\n        if (!MemberStore.instance) this.instance = new MemberStore();\r\n        return MemberStore.instance;\r\n    }\r\n\r\n    @action\r\n    register(id, pw, name, email) {\r\n        const newMember = new Member(id, pw, name, email, 0, 0);\r\n        console.log(newMember);\r\n        return requestSignUp(newMember).then((result) => {\r\n            return result;\r\n        });\r\n    }\r\n\r\n    @action\r\n    login(id, pw) {\r\n        return requestLogin(id, pw).then((result) => {\r\n            return result;\r\n        });\r\n    }\r\n\r\n    @action\r\n    getRanker() {\r\n        return requestGetRanker().then((result) => {\r\n            return result;\r\n        });\r\n    }\r\n}\r\nexport default MemberStore = MemberStore.getInstance();\r\n","import React, { useRef, useContext } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MemberStore from '../stores/MemberStore';\r\nimport Member from '../models/Member';\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function SignUpView(props) {\r\n    const classes = useStyles();\r\n    const memberStore = useContext(MemberStore.context);\r\n    const id = useRef('');\r\n    const pw = useRef('');\r\n    const name = useRef('');\r\n    const email = useRef('');\r\n\r\n    function register(e) {\r\n        e.preventDefault();\r\n        if (id.current.value == '') {\r\n            return;\r\n        }\r\n        if (pw.current.value == '') {\r\n            return;\r\n        }\r\n        if (name.current.value == '') {\r\n            return;\r\n        }\r\n        if (email.current.value == '') {\r\n            return;\r\n        }\r\n\r\n        var member = new Member(\r\n            id.current.value,\r\n            pw.current.value,\r\n            name.current.value,\r\n            email.current.value,\r\n        );\r\n\r\n        console.log(member);\r\n        memberStore.register(member).then((res) => {\r\n            if (res.status == 200) {\r\n                //SnackbarStore.pushMessage(res.data['message'], true);\r\n            } else {\r\n                //SnackbarStore.pushMessage(res.data['message'], false);\r\n            }\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    회원가입\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"닉네임\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={name}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"아이디\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={id}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                autoComplete=\"current-password\"\r\n                                inputRef={pw}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"이메일\"\r\n                                autoComplete=\"email\"\r\n                                inputRef={email}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={register}\r\n                    >\r\n                        Sign Up\r\n                    </Button>\r\n                    <Grid container justify=\"flex-end\">\r\n                        <Grid item>\r\n                            <Link href=\"/buk-pago/signIn\" variant=\"body2\">\r\n                                계정이 이미 있으신가요?\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","import React, { useRef, useContext } from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport MemberStore from '../stores/MemberStore';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const classes = useStyles();\r\n    const memberStore = useContext(MemberStore.context);\r\n    const id = useRef('');\r\n    const pw = useRef('');\r\n    const login = () => {\r\n        memberStore.login(id, pw);\r\n    };\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    로그인\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"id\"\r\n                        autoComplete=\"current-id\"\r\n                        autoFocus\r\n                        inputRef={id}\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        label=\"Password\"\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        inputRef={pw}\r\n                        autoComplete=\"current-password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={login}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link href=\"#\" variant=\"body2\">\r\n                                비밀번호 찾기\r\n                            </Link>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Link href=\"/buk-pago/signUp\" variant=\"body2\">\r\n                                {'회원가입 하기'}\r\n                            </Link>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n","export default class Dictionary{\r\n    constructor(north, south, mean){\r\n        this.north = north\r\n        this.south = south\r\n        this.mean = mean\r\n    }\r\n\r\n    get_dic(){\r\n        return{\r\n            id: this.north,\r\n            south : this.south,\r\n            mean : this.mean\r\n        }\r\n    }\r\n}","import axios from 'axios'\r\nimport Dictionary from '../models/Dictionary'\r\n\r\nexport default async function requestGetDictionary( _query) {\r\n    return await axios.get(\r\n        `/api/dictionary`, { params: { query: _query } },\r\n        { withCredentials: true }\r\n    ).catch(error => { console.warn(error); return [] }).then(result => {\r\n        var data = [];\r\n        if (result.data != null) {\r\n            var tmp = result.data.result\r\n            Object.keys(tmp).map((key, index) => (\r\n                data.push((new Dictionary(tmp[key]['north'], tmp[key]['south']\r\n                    , tmp[key]['mean']\r\n                )).get_dic())\r\n            ))\r\n            return data\r\n        }\r\n        return []\r\n    });\r\n}","import {observable , action} from 'mobx';\r\nimport {createContext} from \"react\";\r\nimport requestGetDictionary from \"../controllers/DictionaryController\"\r\n\r\nclass DictionaryStore {\r\n    @observable dictionarys = [];\r\n    static instance = null;\r\n\r\n    constructor() {\r\n        this.context = createContext(this)\r\n    }\r\n    static getInstance () {\r\n        if (!DictionaryStore.instance)\r\n            this.instance = new DictionaryStore();\r\n        return DictionaryStore.instance;\r\n    }\r\n\r\n    @action\r\n    getDictionary(query) {\r\n        return requestGetDictionary(query).then(\r\n            result => {\r\n                this.dictionarys = [...result]\r\n            }\r\n        )\r\n    }\r\n}\r\nexport default DictionaryStore = DictionaryStore.getInstance()","import React, {useEffect, useState} from 'react'\r\nimport {  Typography, } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DictionaryStore from '../stores/DictionaryStore';\r\n\r\nvar elem = (document.compatMode === \"CSS1Compat\") ? \r\n    document.documentElement :\r\n    document.body;\r\n\r\nvar height = elem.clientHeight;\r\nvar width = elem.clientWidth;\r\n\r\n\r\nfunction getWidth(tableRate,rate){\r\n    return width*tableRate*rate\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root : {\r\n        width : '99%',\r\n        height : '100%',\r\n        display : 'inline-block',\r\n    },\r\n    title : {\r\n        paddingTop : '2%',\r\n        textAlign : \"center\",\r\n        fontWeight : 600,\r\n        paddingBottom : '1%'\r\n    },\r\n    table : {\r\n        paddingTop : '1%',\r\n        height: height*0.6,\r\n        width: '75%'\r\n    },\r\n    search : {\r\n        width: '50%'\r\n    }\r\n})\r\n\r\nconst columns = [\r\n    {field: 'id', headerName : '북한어', width: getWidth(0.75, 2/9)},\r\n    {field: 'south', headerName : '남한어', width: getWidth(0.75, 2/9) },\r\n    {field: 'mean', headerName : '뜻', width: getWidth(0.75, 5/10)}\r\n]\r\n\r\n\r\nexport default function DictionaryView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const onChange = (e) => {\r\n        const str = e.target.value;\r\n        setInputText(str);\r\n    };\r\n\r\n    const search = () => {\r\n        dictionaryStore.getDictionary(inputText);\r\n    }\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            search()\r\n        }\r\n    }\r\n    \r\n    const dictionaryStore = React.useContext(DictionaryStore.context)\r\n    useEffect(() => {\r\n        dictionaryStore.getDictionary();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    북한말 사전\r\n                </Typography>\r\n                <div>\r\n                    <TextField \r\n                        className = {classes.search} \r\n                        id=\"standard-search\" \r\n                        type=\"search\" \r\n                        onKeyPress={handleKeyDown}\r\n                        onChange={onChange}    \r\n                    />\r\n                    <SearchIcon onClick={search}/>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            <div className = {classes.content}>\r\n                <Grid\r\n                    className = {classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <div className = {classes.table}>\r\n                        <DataGrid columns = {columns} rows = {dictionaryStore.dictionarys} pageSize={8} />\r\n                    </div>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState} from 'react'\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport Button from '@material-ui/core/Button';\r\nimport { Typography } from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MemberStore from '../stores/MemberStore'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TrainStore from '../stores/TrainStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    trainText: {\r\n        paddingTop: '2%',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '2%',\r\n    },\r\n    mainContent: {\r\n        width : '100%',\r\n    },\r\n    testCard: {\r\n        marginTop:'3%',\r\n        width: \"50%\",\r\n        height : \"50%\",\r\n        marginLeft: '10%',\r\n    },\r\n    card:{\r\n        padding:'2%'\r\n    },\r\n    pass: {\r\n        float: 'right',\r\n        marginRight: '2%'\r\n    },\r\n    cardGrid: {\r\n        marginTop:'5%',\r\n        width: '100%'\r\n    },\r\n    rankingCard : {\r\n        width: '20%',\r\n        marginLeft : '7%'\r\n    },\r\n    mainGrid : {\r\n        width : '100%'\r\n    },\r\n    ranking : {\r\n        paddingBottom:'5%',\r\n        marginTop: '15%'\r\n    },\r\n    rankingNum : {\r\n        marginTop: '10%'\r\n    }\r\n}\r\n)\r\n\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const trainStore = React.useContext(TrainStore.context);\r\n    const memberStore = React.useContext(MemberStore.context);\r\n    const [inputText,setInputText] = useState('우리는 영광스러운 조선로동당과 조국력사에 빛나는 리정표를 아로새긴 승리자의 긍지와 자부심에 넘쳐 새해 2016년을 맞이합니다.');\r\n    const [outputText,setOutputText] = useState('우리는 영광스러운 조선노동당과 조국 역사에 빛나는 이정표를 아로새긴 승리자의 긍지와 자부심에 넘쳐 새해 2016년을 맞이합니다.');\r\n    const [ranking, setRanking] = useState(['점주오','면주오','선주오','앉은주오','누운주오','나는주오','선주사','선주육','선주칠','선주일','선주이','선수오']);\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n\r\n     const getTestCase = () => {\r\n        /*trainStore.getTestCase().then(result =>{\r\n            setInputText(result[0])\r\n            setOutputText(result[1])\r\n        });*/\r\n    }\r\n\r\n    useEffect(() => {\r\n        /* \r\n        getTestCase();\r\n        memberStore.getRanker().then(result=>{\r\n            setRanking(result)\r\n        });*/\r\n\r\n    }, []);\r\n\r\n    const transLike = () => {\r\n        trainStore.transLike(true,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const transDislike = () => {\r\n        trainStore.transLike(false,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n   \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className= {classes.root}>\r\n            <div className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    北파고 트레이닝\r\n                </Typography>\r\n            </div>\r\n            <div className = {classes.content}>\r\n                <div className={classes.mainContent}>\r\n                    <Grid \r\n                        className= {classes.mainGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        <div className={classes.testCard}>\r\n                            <Card className={classes.card}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.trainText} variant=\"h5\" >\r\n                                        {inputText}\r\n                                    </Typography>\r\n                                    <br />\r\n                                    <Typography variant=\"h6\" >\r\n                                        {outputText}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                        <Grid\r\n                                            className = {classes.cardGrid}\r\n                                            container \r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            spacing={4}\r\n                                        >\r\n                                            <Grid item>\r\n                                                <Button \r\n                                                    variant=\"contained\"\r\n                                                    disableRipple\r\n                                                    size='large'\r\n                                                    onClick={transLike}\r\n                                                >\r\n                                                    <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                                </Button>\r\n                                            </Grid>\r\n                                            \r\n                                            <Grid item>\r\n                                                <Button \r\n                                                    variant=\"contained\"\r\n                                                    disableRipple\r\n                                                    size='large'\r\n                                                    onClick={transDislike}\r\n                                                >\r\n                                                    <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                                </Button>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                <div>\r\n                                    <Tooltip className={classes.pass} onClick={getTestCase}  disableHoverListener title=\"Add\" >\r\n                                        <Button>건너뛰기 → </Button>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        \r\n                        <div className={classes.rankingCard}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Grid\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                        >\r\n                                            <div>\r\n                                                <Grid container justify=\"center\" alignItems=\"center\">\r\n                                                    <Typography className = {classes.title} variant=\"h5\">\r\n                                                        오늘의 순위\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </div>\r\n                                            <div className={classes.ranking} >\r\n                                                <Grid\r\n                                                    container\r\n                                                    direction=\"column\"\r\n                                                    justify=\"center\"\r\n                                                    alignItems=\"center\"\r\n                                                    spacing={7}\r\n                                                >\r\n                                                    \r\n                                                {\r\n                                                    ranking.map((value,idx) => {\r\n                                                        \r\n                                                        return (\r\n                                                            \r\n                                                            <div>\r\n                                                                <Typography className={classes.rankingNum} variant=\"h6\" >{idx+1}. {value}</Typography>\r\n                                                            </div>\r\n\r\n                                                               \r\n                                                        )\r\n                                                    }\r\n                                                    )\r\n                                                }\r\n                                                </Grid>\r\n                                            </div>\r\n                                        </Grid>\r\n                                        \r\n                                    </CardContent>\r\n                                </Card>\r\n                        </div>\r\n                    </Grid>\r\n                    \r\n                    </div>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","import { makeAutoObservable, observable, computed, action, flow } from \"mobx\"\r\nexport class FileTranslationStore {\r\n    originalFiles = [];\r\n    translatedFiles = [];\r\n    fileCount = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this, {\r\n            originalFiles: observable,\r\n            translatedFiles: observable,\r\n            fileCount: observable,\r\n            uploadFile: action\r\n        });\r\n    }\r\n\r\n    uploadFile(files) {\r\n        console.log(files)\r\n\r\n        for (const file of files) {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = (e) => {\r\n                const content = e.target.result;\r\n\r\n                let fileInfo = {\r\n                    name: file.name,\r\n                    size: file.size,\r\n                    content: content,\r\n                }\r\n\r\n                this.originalFiles.push(fileInfo)\r\n                this.fileCount++;\r\n            }\r\n            reader.readAsText(file);\r\n        }\r\n\r\n\r\n        console.log(this.originalFiles)\r\n    }\r\n};\r\n","import { FileTranslationStore } from './FileTranslationStore';\r\n\r\nexport class RootStore {\r\n    FileTranslationStore;\r\n\r\n    constructor() {\r\n        this.FileTranslationStore = new FileTranslationStore();\r\n    }\r\n}","import * as React from 'react'\r\nimport { RootStore } from './RootStore'\r\n\r\nexport const StoreContext = React.createContext(new RootStore());\r\nexport const StoreProvider = StoreContext.Provider;\r\n\r\nexport const useStores = () => React.useContext(StoreContext);","import { useState } from 'react';\r\nimport { observer } from 'mobx-react'\r\nimport { Button, Checkbox, lighten, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Toolbar, Typography } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\nimport { useStores } from '../stores/Context';\r\nimport clsx from 'clsx';\r\n\r\nconst useCustomTableStyles = makeStyles({\r\n    root: {\r\n        width: '100%'\r\n    },\r\n    toolbarRoot: {\r\n        paddingTop: '1%'\r\n    },\r\n    toolbarTitle: {\r\n        flex: \"1 1\",\r\n    },\r\n    button: {\r\n        color: 'white',\r\n        fontWeight: \"600\",\r\n        fontSize: \"1rem\",\r\n    },\r\n    uploadButton: {\r\n        backgroundColor: '#228b22',\r\n    },\r\n    input: {\r\n        display: \"none\",\r\n    },\r\n    highlight: {\r\n        color: '#f50057',\r\n        backgroundColor: lighten('#ff4081', 0.85),\r\n    },\r\n    headerRoot: {\r\n        width: '100%'\r\n    },\r\n    idCell: {\r\n        width: '5%'\r\n    },\r\n    nameCell: {\r\n        width: '75%'\r\n    },\r\n    sizeCell: {\r\n        width: '20%'\r\n    },\r\n})\r\n\r\nexport default observer(function CustomCheckboxTable(props) {\r\n    const classes = useCustomTableStyles();\r\n    const [selected, setSelected] = useState([]);\r\n    const { FileTranslationStore } = useStores();\r\n\r\n    const handleUploadFile = (e) => {\r\n        let files = e.target.files\r\n\r\n        FileTranslationStore.uploadFile(files)\r\n    }\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        const newSelected = []\r\n\r\n        if (event.target.checked) {\r\n            FileTranslationStore.originalFiles.forEach((file, index) => {\r\n                newSelected.push(index)\r\n            })\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    }\r\n\r\n    const handleClick = (event, index) => {\r\n        const selectedIndex = selected.indexOf(index);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, index);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(\r\n                selected.slice(0, selectedIndex),\r\n                selected.slice(selectedIndex + 1),\r\n            );\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    }\r\n\r\n    const isSelected = (index) => {\r\n        return selected.indexOf(index) !== -1;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Toolbar className={clsx(classes.toolbarRoot, { [classes.highlight]: selected.length > 0 })}>\r\n                {\r\n                    FileTranslationStore.numSelected > 0 ? (\r\n                        <Typography className={classes.toolbarTitle} variant=\"subtitle1\" component=\"div\">\r\n                            {FileTranslationStore.numSelected} 선택 됨\r\n                        </Typography>\r\n                    ) : (\r\n                        <Typography className={classes.toolbarTitle} variant=\"h6\" component=\"div\">\r\n                            원본파일\r\n                        </Typography>\r\n                    )\r\n                }\r\n                {selected.length > 0 ? (\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                        color=\"secondary\"\r\n                        endIcon={<DeleteIcon />}\r\n                    >\r\n                        삭제\r\n                    </Button>\r\n                ) : (\r\n                    <Button\r\n                        className={clsx(classes.button, classes.uploadButton)}\r\n                        variant=\"contained\"\r\n                        component=\"label\"\r\n                        endIcon={<PublishIcon />}\r\n                    >\r\n                        업로드\r\n                        <input\r\n                            id='upload'\r\n                            className={classes.input}\r\n                            multiple\r\n                            type=\"file\"\r\n                            accept=\".txt\"\r\n                            onChange={handleUploadFile}\r\n                        />\r\n                    </Button>\r\n                )\r\n                }\r\n            </Toolbar>\r\n            <TableContainer>\r\n                <Table className={classes.table}>\r\n                    <TableHead className={classes.headerRoot}>\r\n                        <TableRow>\r\n                            <TableCell padding=\"checkbox\">\r\n                                <Checkbox\r\n                                    indeterminate={selected.length > 0 && selected.length < FileTranslationStore.fileCount}\r\n                                    checked={FileTranslationStore.fileCount > 0 && selected.length === FileTranslationStore.fileCount}\r\n                                    onChange={handleSelectAllClick}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell className={classes.idCell} key='id' align='center'>ID</TableCell>\r\n                            <TableCell className={classes.nameCell} key='fileName' align='left'>파일 이름</TableCell>\r\n                            <TableCell className={classes.sizeCell} key='filSize' align='left'>파일 크기</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {FileTranslationStore.originalFiles.map((fileInfo, index) => {\r\n                            const isItemSelected = isSelected(index);\r\n\r\n                            return (\r\n                                <TableRow\r\n                                    hover\r\n                                    onClick={(event) => handleClick(event, index)}\r\n                                    role=\"checkbox\"\r\n                                    key={index}\r\n                                    selected={isItemSelected}\r\n                                >\r\n                                    <TableCell padding=\"checkbox\">\r\n                                        <Checkbox\r\n                                            checked={isItemSelected}\r\n                                        />\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.idCell}>{index}</TableCell>\r\n                                    <TableCell className={classes.nameCell}>{fileInfo.name}</TableCell>\r\n                                    <TableCell className={classes.sizeCell}>{fileInfo.size}</TableCell>\r\n                                </TableRow>\r\n                            )\r\n                        })}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n});","import clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { Box, Button, Grid, Paper, Typography } from '@material-ui/core';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport CustomCheckboxTable from './CustomCheckboxTable';\r\n\r\nconst useBodyStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '5%',\r\n        width: '100%',\r\n        height: 'auto',\r\n    },\r\n    leftBox: {\r\n        width: '40%',\r\n    },\r\n    rightBox: {\r\n        width: '40%',\r\n    },\r\n    middleBox: {\r\n        width: '8%',\r\n        height: '100%',\r\n    },\r\n    columFlexBox: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'flex-start',\r\n    },\r\n    alignCenter: {\r\n        alignItems: 'center',\r\n    },\r\n    translateBtn: {\r\n        fontWeight: '600',\r\n        fontSize: '1rem',\r\n    },\r\n});\r\n\r\nexport default function FileTranslationView(props) {\r\n    const classes = useBodyStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.title}>\r\n                <Typography variant=\"h3\" className={classes.title}>\r\n                    파일번역\r\n                </Typography>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"flex-start\">\r\n                    <Box component={Paper} className={clsx(classes.columFlexBox, classes.leftBox)}>\r\n                        <CustomCheckboxTable />\r\n                    </Box>\r\n\r\n                    <Box\r\n                        className={clsx(\r\n                            classes.columFlexBox,\r\n                            classes.alignCenter,\r\n                            classes.middleBox,\r\n                        )}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            className={classes.translateBtn}\r\n                            color=\"primary\"\r\n                            endIcon={<ArrowForwardIcon />}\r\n                        >\r\n                            변환\r\n                        </Button>\r\n                    </Box>\r\n\r\n                    <Box\r\n                        component={Paper}\r\n                        className={clsx(classes.columFlexBox, classes.rightBox)}\r\n                    ></Box>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import './App.css';\r\nimport React, { useContext } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport HomeLayout from './HomeLayout';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { useCookies } from 'react-cookie';\r\nimport { createMuiTheme } from '@material-ui/core';\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\r\n\r\nimport TranslationView from './components/TranslationView';\r\nimport SignUpView from './components/SignUpView';\r\nimport SignInView from './components/SignInView';\r\nimport DictionaryView from './components/DictionaryView';\r\nimport TrainView from './components/TrainView';\r\nimport FileTranslationView from './components/FileTranslationView.js'\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    '@global': {\r\n        'body, html': {\r\n            padding: 0,\r\n            margin: 0,\r\n            minHeight: '100%',\r\n            backgroundColor: '#f7fafa',\r\n        },\r\n    },\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#58a0d1',\r\n            dark: '#3d7092',\r\n            light: '#79b3da',\r\n            contrastText: '#fff',\r\n        }\r\n    },\r\n    overrides: {\r\n        MuiButton: {\r\n            root: {\r\n                color: \"white\",\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst App = observer((props) => {\r\n    const classes = useStyle();\r\n    const [cookies, setCookie, removeCookie] = useCookies(['jwt']);\r\n    const [hasCookie, setHasCookie] = React.useState(false);\r\n    console.log(hasCookie);\r\n    React.useEffect(() => {\r\n        if (cookies['jwt'] != undefined) setHasCookie(true);\r\n    });\r\n    return (\r\n        <div className={classes.root}>\r\n            <MuiThemeProvider theme={theme}>\r\n                <Router>\r\n                    <HomeLayout\r\n                        cookies={cookies}\r\n                        hasCookie={hasCookie}\r\n                        setHasCookie={setHasCookie}\r\n                        removeCookie={removeCookie}\r\n                        hasCookie={hasCookie}\r\n                    >\r\n                        <Switch>\r\n                            <Route path=\"/buk-pago/signUp\" component={SignUpView} />\r\n                            <Route path=\"/buk-pago/signIn\" component={SignInView} />\r\n                            <Route exact path=\"/buk-pago\" component={TranslationView} />\r\n                            <Route exact path=\"/buk-pago/dictionary\" component={DictionaryView} />\r\n                            <Route exact path=\"/buk-pago/train\" component={TrainView} />\r\n                            <Route exact path=\"/buk-pago/file-translate\" component={FileTranslationView} />\r\n                        </Switch>\r\n                    </HomeLayout>\r\n                </Router>\r\n            </MuiThemeProvider>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport { StoreProvider } from './stores/Context';\r\nimport { RootStore } from './stores/RootStore'\r\n\r\nconst rootStore = new RootStore();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StoreProvider value={rootStore}>\r\n      <App />\r\n    </StoreProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}