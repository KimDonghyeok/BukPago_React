{"version":3,"sources":["HomeLayout.js","controllers/TranslationController.js","stores/TranslationStore.js","controllers/TrainController.js","stores/TrainStore.js","components/TranslationView.js","components/SignInView.js","models/Dictionary.js","controllers/DictionaryController.js","stores/DictionaryStore.js","components/DictionaryView.js","controllers/MemberController.js","stores/MemberStore.js","components/TrainView.js","App.js","reportWebVitals.js","index.js"],"names":["useStyle","makeStyles","theme","root","width","height","appBar","backgroundColor","grid","paddingLeft","title","fontSize","fontWeight","contentArea","paddingTop","minHeight","minWidth","position","link","textDecoration","HomeLayout","props","children","useState","classes","cookies","setHasCookie","removeCookie","hasCookie","className","AppBar","Toolbar","toolBar","alignItems","Grid","container","direction","justify","to","pathname","style","Button","color","size","_NK","a","axios","get","params","NK","withCredentials","catch","error","then","res","data","result","TranslationStore","this","context","createContext","northText","requestTranslate","instance","observable","action","getInstance","requestTranslike","_isLike","_SK","post","isLike","SK","TrainStore","inputText","outputText","requestTransLike","requestGetTestCase","requestTransOffer","useStyles","display","textAlign","content","paper","marginTop","textField","button","float","box","textLength","right","bottom","clearButton","top","bukPaper","namPaper","upDownBtn","TranslationView","setInputText","inputTextLength","setInputTextLength","setOutputTextLength","setOutputText","open","setOpen","setContent","severity","setSeverity","translateState","setTranslateState","maxTextLength","translationStore","React","useContext","trainStore","handleClose","Typography","variant","Paper","TextField","id","multiline","autoFocus","rows","onChange","e","str","target","value","length","Box","disableRipple","onClick","translate","err","console","log","IconButton","InputProps","readOnly","ButtonGroup","aria-label","transLike","transOffer","navigator","clipboard","writeText","Snackbar","autoHideDuration","onClose","Alert","margin","boxSizing","padding","registerContent","justifyContent","flexDirection","registerId","outline","registerPassword","register","autoRegister","lineHeight","registerBtn","cursor","marginBottom","borderRadius","borderStyle","SignInView","userId","setUserId","userPassword","setUserPassword","checkPassword","setUserCheckPassword","userNickname","makeUserNickname","placeholder","Modal","Dictionary","north","south","mean","_query","query","warn","tmp","Object","keys","map","key","index","push","get_dic","DictionaryStore","requestGetDictionary","dictionarys","elem","document","compatMode","documentElement","body","clientHeight","clientWidth","getWidth","tableRate","rate","paddingBottom","table","search","columns","field","headerName","DictionaryView","dictionaryStore","getDictionary","useEffect","type","onKeyPress","event","pageSize","requestLogin","email","pw","password","member","nickname","MemberStore","requestSignUp","requestGetRanker","trainText","mainContent","testCard","marginLeft","card","pass","marginRight","cardGrid","rankingCard","mainGrid","ranking","rankingNum","Card","CardContent","CardActions","spacing","item","Tooltip","disableHoverListener","idx","createMuiTheme","palette","primary","main","dark","light","contrastText","secondary","App","observer","useCookies","undefined","exact","path","component","TrainView","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5104e37f.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n    appBar: {\r\n        backgroundColor: '#58a0d1',\r\n    },\r\n    grid: {\r\n        paddingLeft: '5%',\r\n        width: '50%',\r\n    },\r\n    title: {\r\n        fontSize: '18px',\r\n        fontWeight: 600,\r\n    },\r\n    contentArea : {\r\n        paddingTop : '5%',\r\n        width : '100%',\r\n        height : '100%',\r\n        minHeight : '80%',\r\n        minWidth : '100%',\r\n        position : 'sticky',\r\n    },\r\n    link : {\r\n        textDecoration: 'none'\r\n    }\r\n}))\r\n\r\n\r\nfunction HomeLayout(props) {\r\n    const { children } = props;\r\n    const [open, setState] = useState(false);\r\n    const classes = useStyle();\r\n    const cookies = props.cookies\r\n    const setHasCookie = props.setHasCookie\r\n    const removeCookie = props.removeCookie\r\n    const hasCookie = props.hasCookie\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar className={classes.appBar}>\r\n                <Toolbar className={classes.toolBar} alignItems=\"flex-end\" position=\"fixed\">\r\n                    <Grid\r\n                        className={classes.grid}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"space-between\"\r\n                        alignItems=\"flex-start\"\r\n                    >\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} color=\"secondary\" size=\"large\">\r\n                                北파고\r\n                            </Button>\r\n                        </Link>\r\n                        <Button className={classes.title} color=\"secondary\" size=\"large\">\r\n                            파일번역\r\n                        </Button>\r\n                        <Link\r\n                            to={{\r\n                                pathname: '/dictionary',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} color=\"secondary\" size=\"large\">\r\n                                북한말 사전\r\n                            </Button>\r\n                        </Link>\r\n                        \r\n                        \r\n                        <Link\r\n                            to={{\r\n                                pathname: '/train',\r\n                            }}\r\n                            style={{ textDecoration: 'none' }}\r\n                        >\r\n                            <Button className={classes.title} color=\"secondary\" size=\"large\">\r\n                                北파고 Train\r\n                            </Button>\r\n                        </Link>\r\n                    </Grid>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className={classes.contentArea}>{children}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomeLayout;\r\n","import axios from 'axios'\r\n\r\nexport default async function requestTranslate(_NK) {\r\n    return await axios.get(\r\n        '/api/translator',{params : {NK : _NK}}, {withCredentials : true}\r\n    ).catch(error => {return error}).then(res => {\r\n        if(res.data != null){\r\n            return res.data.result\r\n        }\r\n    })\r\n}\r\n\r\n","import { observable, action } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestTranslate from '../controllers/TranslationController';\r\n\r\n\r\nclass TranslationStore {\r\n    @observable translates = [];\r\n    static instance = null;\r\n\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n    static getInstance() {\r\n        if (!TranslationStore.instance) this.instance = new TranslationStore();\r\n        return TranslationStore.instance;\r\n    }\r\n\r\n    @action\r\n    translate(northText) {\r\n        return requestTranslate(northText)\r\n    }\r\n\r\n}\r\nexport default TranslationStore = TranslationStore.getInstance();\r\n","import axios from 'axios'\r\nimport Train from '../models/Train'\r\n\r\nexport default async function requestTranslike(_isLike, _NK, _SK) {\r\n    return await axios.post(\r\n        '/api/evaluation', {params : {isLike : _isLike, NK: _NK, SK : _SK}}, {withCredentials : true}\r\n    ).catch(error => {return error}).then(res => {\r\n        return res.data\r\n    })\r\n}\r\n\r\n\r\nexport async function requestGetTestCase() {\r\n    return await axios.get(\r\n        'api/evaluation', {withCredentials : true}\r\n    ).catch(error => {return error}).then(result => {\r\n        var data = [];\r\n        if(result.data != null){ // 5-2\r\n            var tmp = result.data\r\n            Object.keys(tmp).map((key,index) => (\r\n                data.push(new Train(tmp[key]['NK'], tmp[key]['SK']\r\n                ))\r\n            ))\r\n            return data\r\n        }\r\n        return []\r\n    })\r\n}\r\n\r\nexport async function requestTransOffer( _NK, _SK) {\r\n    return await axios.post(\r\n        'api/evaluation/make', {params : { NK: _NK, SK : _SK}}, {withCredentials : true}\r\n    ).catch(error => {return error}).then(res => {\r\n        return res.data\r\n    })\r\n}","import { observable, action } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestGetTestCase from '../controllers/TrainController';\r\nimport requestTransLike from '../controllers/TrainController';\r\nimport requestTransOffer from '../controllers/TrainController';\r\n\r\n\r\nclass TrainStore {\r\n    @observable trains = [];\r\n    static instance = null;\r\n\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n\r\n    static getInstance() {\r\n        if (!TrainStore.instance) this.instance = new TrainStore();\r\n        return TrainStore.instance;\r\n    }\r\n\r\n    @action\r\n    transLike(isLike, inputText, outputText){\r\n        \r\n        return requestTransLike(isLike, inputText, outputText).then(res => {\r\n            return res\r\n        })\r\n    }\r\n\r\n    @action\r\n    getTestCase(){\r\n        return requestGetTestCase().then(result=>{\r\n            return result\r\n        })\r\n    }\r\n\r\n    @action\r\n    transOffer(inputText,outputText){\r\n        return requestTransOffer(inputText,outputText).then(res => {\r\n            return res\r\n        })\r\n    }\r\n}\r\n\r\nexport default TrainStore = TrainStore.getInstance();\r\n","import React,  {  useState } from 'react'\r\nimport { Typography, } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TranslationStore from '../stores/TranslationStore';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport TrainStore from '../stores/TrainStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '1%',\r\n    },\r\n    paper: {\r\n        marginTop: '1%',\r\n        width: '35%',\r\n        height: '50%',\r\n        position : 'relative'\r\n    },\r\n    textField: {\r\n        width: '100%',\r\n        fontSize : 100,\r\n    },\r\n    button: {\r\n        float: 'right',\r\n    },\r\n    box: {\r\n        //display: 'flex',\r\n        //flex: 1,\r\n        //flexDirection: 'row-reverse',\r\n    },\r\n    textLength: {\r\n        position: 'absolute',\r\n        right: '2%',\r\n        bottom: '10%',\r\n    },\r\n    clearButton: {\r\n        position: 'absolute',\r\n        right: '0%',\r\n        top: '0%',\r\n    },\r\n    bukPaper : {\r\n        textAlign : \"center\",\r\n        width : '10%',\r\n        backgroundColor : '#ffd6d6'\r\n    },\r\n    namPaper: {\r\n        textAlign: 'center',\r\n        width: '10%',\r\n        backgroundColor: '#d6f8ff',\r\n    },\r\n    upDownBtn: {\r\n        float: 'left'\r\n    }\r\n});\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const [inputTextLength, setInputTextLength] = useState(0);\r\n    const [outputTextLength, setOutputTextLength] = useState(0);\r\n    const [outputText, setOutputText] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n    const [translateState, setTranslateState] = useState(false)\r\n    const maxTextLength = 3000;\r\n    const translationStore = React.useContext(TranslationStore.context);\r\n    const trainStore = React.useContext(TrainStore.context);\r\n    const onInputChange = (e) => {\r\n        const str = e.target.value;\r\n        setTranslateState(false);\r\n        if (str.length <= maxTextLength) {\r\n            setInputText(str);\r\n            setInputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n\r\n    const onOutputChange = (e) => {\r\n        const str = e.target.value;\r\n        if (str.length <= maxTextLength) {\r\n            setOutputText(str);\r\n            setOutputTextLength(str.length);\r\n        } else {\r\n            setContent('3000자 이하만 입력 가능합니다.');\r\n            setSeverity('warning');\r\n            setOpen(true);\r\n        }\r\n    };\r\n    const textClear = () => {\r\n        setInputText('');\r\n        setInputTextLength(0);\r\n        setTranslateState(false);\r\n        setOutputText('');\r\n    };\r\n\r\n    const copyText = () => {\r\n        navigator.clipboard.writeText(outputText);\r\n        setContent('복사가 완료되었습니다.');\r\n        setSeverity('success');\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const transLike = () => {\r\n        trainStore.transLike(true,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const transDislike = () => {\r\n        trainStore.transLike(false,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const translate = () => {\r\n        translationStore.translate(inputText).then(result => \r\n            {\r\n                setOutputText(result)\r\n                setTranslateState(true)\r\n            }\r\n        ).catch( err => { console.log(err);})\r\n    }\r\n\r\n    const transOffer = () => {\r\n        trainStore.transOffer(inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch( err => { console.log(err);})\r\n    }\r\n    return(\r\n        <div className={classes.root} >\r\n            <div  className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    북한어 번역\r\n                </Typography>\r\n            </div>\r\n            <br />\r\n            <div className={classes.content}>\r\n                <Grid\r\n                    className = {classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Paper className={classes.bukPaper}>\r\n                        <Typography variant=\"h5\">북한어</Typography>\r\n                    </Paper>\r\n                    <Paper className={classes.namPaper}>\r\n                        <Typography variant=\"h5\">남한어</Typography>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n                    <Paper className={classes.paper}>\r\n                        <TextField\r\n                            className={classes.textField}\r\n                            id=\"outlined-multiline-static\"\r\n                            multiline\r\n                            autoFocus\r\n                            rows={17}\r\n                            onChange={onInputChange}\r\n                            value={inputText}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Typography className={classes.textLength}>\r\n                            {inputTextLength} / {maxTextLength}\r\n                        </Typography>\r\n                        <Box className={classes.box}>\r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                onClick={translate}\r\n                                color=\"primary\"\r\n                            >\r\n                                번역하기\r\n                            </Button>\r\n                            {inputTextLength == 0 ? null : (\r\n                                <IconButton\r\n                                    className={classes.clearButton}\r\n                                    variant=\"contained\"\r\n                                    onClick={textClear}\r\n                                >\r\n                                    <ClearIcon></ClearIcon>\r\n                                </IconButton>\r\n                            )}\r\n                        </Box>\r\n                    </Paper>\r\n\r\n                    <Paper className={classes.paper}>\r\n                        {translateState == false ?  \r\n                            (\r\n                                <TextField\r\n                                    className={classes.textField}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    multiline\r\n                                    rows={17}\r\n                                    variant=\"outlined\"\r\n                                    InputProps={{\r\n                                        readOnly: true,\r\n                                    }}\r\n                                    value={outputText}\r\n                                />\r\n                            )   :\r\n                            <TextField\r\n                                    className={classes.textField}\r\n                                    id=\"outlined-multiline-static\"\r\n                                    multiline\r\n                                    rows={17}\r\n                                    variant=\"outlined\"\r\n                                    value={outputText}\r\n                                    onChange={onOutputChange}\r\n                            />\r\n                        }\r\n                        <Box className={classes.box}>\r\n                            {translateState == false ? null : \r\n                                (\r\n                                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transLike}\r\n                                        >\r\n                                            <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                        </Button>\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transDislike}\r\n                                        >\r\n                                            <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                        </Button>\r\n                                        <Button \r\n                                            className = {classes.upDownBtn}\r\n                                            disableRipple\r\n                                            color=\"primary\"\r\n                                            onClick={transOffer}\r\n                                        >\r\n                                            수정하기\r\n                                        </Button>\r\n                                    </ButtonGroup>\r\n                                )\r\n                            }\r\n                           \r\n                            \r\n                            <Button\r\n                                className={classes.button}\r\n                                variant=\"contained\"\r\n                                disableRipple\r\n                                color=\"primary\"\r\n                                onClick={copyText}\r\n                            >\r\n                                <FileCopyIcon></FileCopyIcon>\r\n                            </Button>\r\n                        </Box>\r\n                    </Paper>\r\n                </Grid>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, { Component, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        position: 'relative',\r\n        width: '480px',\r\n        height: '620px',\r\n        margin: 'auto',\r\n        backgroundColor: 'rgba(0, 0, 0, 0.6)',\r\n    },\r\n    content: {\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'white',\r\n        position: 'relative',\r\n        boxSizing: 'border-box',\r\n        margin: '80px auto',\r\n        padding: '20px',\r\n        //      background: '#fff',\r\n    },\r\n    registerContent: {\r\n        width: '100%',\r\n        margin: '0 auto',\r\n        position: 'relative',\r\n        padding: '0 20px 32px',\r\n        boxSizing: 'border-box',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    registerId: {\r\n        width: '100%',\r\n        height: '40px',\r\n        marginTop: '30px',\r\n        padding: '9px 12px',\r\n        outline: 'none',\r\n        boxSizing: 'border-box',\r\n    },\r\n    registerPassword: {\r\n        width: '100%',\r\n        height: '40px',\r\n        marginTop: '15px',\r\n        padding: '9px 12px',\r\n        outline: 'none',\r\n        boxSizing: 'border-box',\r\n    },\r\n    register: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n    },\r\n    autoRegister: {\r\n        marginTop: '20px',\r\n        fontSize: '12px',\r\n        color: '#8d8d8d',\r\n        lineHeight: 3,\r\n    },\r\n    registerBtn: {\r\n        variant: \"contained\",\r\n        color: \"white\",\r\n        height: '40px',\r\n        fontSize: '14px',\r\n        padding: '13px 30px',\r\n        cursor: 'pointer',\r\n        backgroundColor: 'black',\r\n        lineHeight: '1px',\r\n        marginTop: '20px',\r\n        marginBottom: '12px',\r\n        borderRadius: '3px',\r\n        borderStyle: 'none',\r\n    },\r\n});\r\n\r\nexport default function SignInView(props) {\r\n    const [userId, setUserId] = useState('');\r\n    const [userPassword, setUserPassword] = useState('');\r\n    const [checkPassword, setUserCheckPassword] = useState('');\r\n    const [userNickname, makeUserNickname] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n    const classes = useStyles();\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n    const handleChangeUserId = (e) => {\r\n        setUserId(e.target.value);\r\n    };\r\n    const handleChangeUserPassword = (e) => {\r\n        setUserPassword(e.target.value);\r\n    };\r\n    const handleChangeUserCheckPassword = (e) => {\r\n        setUserCheckPassword(e.target.value);\r\n    };\r\n    const makeChangeUserNickname = (e) => {\r\n        makeUserNickname(e.target.value);\r\n    };\r\n    const handleRegisteUser = () => {\r\n        console.register({ userId }, { userPassword, userNickname });\r\n        /*\r\n        서버에 등록\r\n        */\r\n    };\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className={classes.content}>\r\n                <div className={classes.registerContent}>\r\n                <TextField\r\n                        className={classes.registerPassword}\r\n                        id=\"registerNickname\"\r\n                        placeholder=\"별명\"\r\n                        onChange={makeChangeUserNickname}\r\n                        value={userNickname}\r\n                    ></TextField>\r\n                    <TextField\r\n                        className={classes.registerId}\r\n                        id=\"registerId\"\r\n                        placeholder=\"아이디\"\r\n                        onChange={handleChangeUserId}\r\n                        value={userId}\r\n                    ></TextField>\r\n                    <TextField\r\n                        className={classes.registerPassword}\r\n                        id=\"registerPassword\"\r\n                        placeholder=\"비밀번호\"\r\n                        onChange={handleChangeUserPassword}\r\n                        value={userPassword}\r\n                    ></TextField>\r\n                    <TextField\r\n                        className={classes.registerPassword}\r\n                        id=\"checkPassword\"\r\n                        placeholder=\"비밀번호 확인\"\r\n                        onChange={handleChangeUserCheckPassword}\r\n                        value={checkPassword}\r\n                    ></TextField>\r\n\r\n                    <Button className={classes.registerBtn} onClick={handleRegisteUser}>\r\n                        {''}가입하기{''}\r\n                    </Button>\r\n                    <Modal open={open} onClose={handleClose}>\r\n                             <SignInView />\r\n                         </Modal>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","export default class Dictionary{\r\n    constructor(north, south, mean){\r\n        this.north = north\r\n        this.south = south\r\n        this.mean = mean\r\n    }\r\n\r\n    get_dic(){\r\n        return{\r\n            id: this.north,\r\n            south : this.south,\r\n            mean : this.mean\r\n        }\r\n    }\r\n}","import axios from 'axios'\r\nimport Dictionary from '../models/Dictionary'\r\n\r\nexport default async function requestGetDictionary( _query) {\r\n    return await axios.get(\r\n        `/api/dictionary`, { params: { query: _query } },\r\n        { withCredentials: true }\r\n    ).catch(error => { console.warn(error); return [] }).then(result => {\r\n        var data = [];\r\n        if (result.data != null) {\r\n            var tmp = result.data.result\r\n            Object.keys(tmp).map((key, index) => (\r\n                data.push((new Dictionary(tmp[key]['north'], tmp[key]['south']\r\n                    , tmp[key]['mean']\r\n                )).get_dic())\r\n            ))\r\n            return data\r\n        }\r\n        return []\r\n    });\r\n}","import {observable , action} from 'mobx';\r\nimport {createContext} from \"react\";\r\nimport requestGetDictionary from \"../controllers/DictionaryController\"\r\n\r\nclass DictionaryStore {\r\n    @observable dictionarys = [];\r\n    static instance = null;\r\n\r\n    constructor() {\r\n        this.context = createContext(this)\r\n    }\r\n    static getInstance () {\r\n        if (!DictionaryStore.instance)\r\n            this.instance = new DictionaryStore();\r\n        return DictionaryStore.instance;\r\n    }\r\n\r\n    @action\r\n    getDictionary(query) {\r\n        return requestGetDictionary(query).then(\r\n            result => {\r\n                this.dictionarys = [...result]\r\n            }\r\n        )\r\n    }\r\n}\r\nexport default DictionaryStore = DictionaryStore.getInstance()","import React, {useEffect, useState} from 'react'\r\nimport {  Typography, } from '@material-ui/core';\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport DictionaryStore from '../stores/DictionaryStore';\r\n\r\nvar elem = (document.compatMode === \"CSS1Compat\") ? \r\n    document.documentElement :\r\n    document.body;\r\n\r\nvar height = elem.clientHeight;\r\nvar width = elem.clientWidth;\r\n\r\n\r\nfunction getWidth(tableRate,rate){\r\n    return width*tableRate*rate\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root : {\r\n        width : '99%',\r\n        height : '100%',\r\n        display : 'inline-block',\r\n    },\r\n    title : {\r\n        paddingTop : '2%',\r\n        textAlign : \"center\",\r\n        fontWeight : 600,\r\n        paddingBottom : '1%'\r\n    },\r\n    table : {\r\n        paddingTop : '1%',\r\n        height: height*0.6,\r\n        width: '75%'\r\n    },\r\n    search : {\r\n        width: '50%'\r\n    }\r\n})\r\n\r\nconst columns = [\r\n    {field: 'id', headerName : '북한어', width: getWidth(0.75, 2/9)},\r\n    {field: 'south', headerName : '남한어', width: getWidth(0.75, 2/9) },\r\n    {field: 'mean', headerName : '뜻', width: getWidth(0.75, 5/10)}\r\n]\r\n\r\n\r\nexport default function DictionaryView(props) {\r\n    const classes = useStyles();\r\n    const [inputText, setInputText] = useState('');\r\n    const onChange = (e) => {\r\n        const str = e.target.value;\r\n        setInputText(str);\r\n    };\r\n\r\n    const search = () => {\r\n        dictionaryStore.getDictionary(inputText);\r\n    }\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            search()\r\n        }\r\n    }\r\n    \r\n    const dictionaryStore = React.useContext(DictionaryStore.context)\r\n    useEffect(() => {\r\n        dictionaryStore.getDictionary();\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <div className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    북한말 사전\r\n                </Typography>\r\n                <div>\r\n                    <TextField \r\n                        className = {classes.search} \r\n                        id=\"standard-search\" \r\n                        type=\"search\" \r\n                        onKeyPress={handleKeyDown}\r\n                        onChange={onChange}    \r\n                    />\r\n                    <SearchIcon onClick={search}/>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            <div className = {classes.content}>\r\n                <Grid\r\n                    className = {classes.grid}\r\n                    container\r\n                    direction=\"row\"\r\n                    justify=\"space-evenly\"\r\n                    alignItems=\"center\"\r\n                >\r\n                    <div className = {classes.table}>\r\n                        <DataGrid columns = {columns} rows = {dictionaryStore.dictionarys} pageSize={8} />\r\n                    </div>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import axios from 'axios';\r\nimport Member from '../models/Members'\r\n\r\nexport default async function requestLogin(email, pw) {\r\n    return await axios\r\n        .post('api/login', { email: email, password: pw })\r\n        .catch((error) => {\r\n            return error;\r\n        })\r\n        .then((res) => {\r\n            return res;\r\n        });\r\n}\r\n\r\nexport async function requestSignUp(member) {\r\n    return await axios.post(\r\n        '/api/freeboard/',\r\n        {id : member.id, pw : member.pw, nickname : member.nickname}\r\n    ).then(res => {console.log(res); return res}).catch(err => {return err})\r\n}\r\n\r\nexport async function requestGetRanker(){\r\n    return await axios.get(\r\n        '/api/rank'\r\n    ).catch((error)=> {return error;}).then((res) => {\r\n        return res;\r\n    });\r\n}","import { action, observable } from 'mobx';\r\nimport { createContext } from 'react';\r\nimport requestLogin, { requestSignUp,requestGetRanker} from '../controllers/MemberController';\r\nimport Member from '../models/Members'\r\nimport { CookiesProvider } from 'react-cookie';\r\n\r\n\r\nclass MemberStore {\r\n    @observable members = [];\r\n    static instance = null;\r\n    constructor() {\r\n        this.context = createContext(this);\r\n    }\r\n    static getInstance() {\r\n        if (!MemberStore.instance) this.instance = new MemberStore();\r\n        return MemberStore.instance;\r\n    }\r\n    @action\r\n    signUp(member) {\r\n        return requestSignUp(member)\r\n    }\r\n    @action\r\n    async login(email, pw) {\r\n        return requestLogin(email, pw);\r\n    }\r\n    @action\r\n    getRanker() {\r\n        return requestGetRanker().then(result=>{\r\n            return result\r\n        })\r\n    }\r\n\r\n}\r\nexport default MemberStore = MemberStore.getInstance();\r\n","import React, { useEffect, useState} from 'react'\r\nimport { makeStyles } from \"@material-ui/styles\"\r\nimport Button from '@material-ui/core/Button';\r\nimport { Typography } from '@material-ui/core';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\nimport ThumbDownAltIcon from '@material-ui/icons/ThumbDownAlt';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport MemberStore from '../stores/MemberStore'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport TrainStore from '../stores/TrainStore';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '99%',\r\n        height: '100%',\r\n        display: 'inline-block',\r\n    },\r\n    title: {\r\n        paddingTop: '2%',\r\n        textAlign: 'center',\r\n        fontWeight: 600,\r\n    },\r\n    trainText: {\r\n        paddingTop: '2%',\r\n        fontWeight: 600,\r\n    },\r\n    content: {\r\n        paddingTop: '2%',\r\n    },\r\n    mainContent: {\r\n        width : '100%',\r\n    },\r\n    testCard: {\r\n        marginTop:'3%',\r\n        width: \"50%\",\r\n        height : \"50%\",\r\n        marginLeft: '10%',\r\n    },\r\n    card:{\r\n        padding:'2%'\r\n    },\r\n    pass: {\r\n        float: 'right',\r\n        marginRight: '2%'\r\n    },\r\n    cardGrid: {\r\n        marginTop:'5%',\r\n        width: '100%'\r\n    },\r\n    rankingCard : {\r\n        width: '20%',\r\n        marginLeft : '7%'\r\n    },\r\n    mainGrid : {\r\n        width : '100%'\r\n    },\r\n    ranking : {\r\n        paddingBottom:'5%',\r\n        marginTop: '15%'\r\n    },\r\n    rankingNum : {\r\n        marginTop: '10%'\r\n    }\r\n}\r\n)\r\n\r\n\r\nexport default function TranslationView(props) {\r\n    const classes = useStyles();\r\n    const trainStore = React.useContext(TrainStore.context);\r\n    const memberStore = React.useContext(MemberStore.context);\r\n    const [inputText,setInputText] = useState('우리는 영광스러운 조선로동당과 조국력사에 빛나는 리정표를 아로새긴 승리자의 긍지와 자부심에 넘쳐 새해 2016년을 맞이합니다.');\r\n    const [outputText,setOutputText] = useState('우리는 영광스러운 조선노동당과 조국 역사에 빛나는 이정표를 아로새긴 승리자의 긍지와 자부심에 넘쳐 새해 2016년을 맞이합니다.');\r\n    const [ranking, setRanking] = useState(['점주오','면주오','선주오','앉은주오','누운주오','나는주오','선주사','선주육','선주칠','선주일','선주이','선수오']);\r\n    const [open, setOpen] = useState(false);\r\n    const [content, setContent] = useState('');\r\n    const [severity, setSeverity] = useState('success');\r\n\r\n     const getTestCase = () => {\r\n        /*trainStore.getTestCase().then(result =>{\r\n            setInputText(result[0])\r\n            setOutputText(result[1])\r\n        });*/\r\n    }\r\n\r\n    useEffect(() => {\r\n        /* \r\n        getTestCase();\r\n        memberStore.getRanker().then(result=>{\r\n            setRanking(result)\r\n        });*/\r\n\r\n    }, []);\r\n\r\n    const transLike = () => {\r\n        trainStore.transLike(true,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n    const transDislike = () => {\r\n        trainStore.transLike(false,inputText,outputText).then(result =>\r\n            {\r\n                setContent('피드백 감사합니다! :)')\r\n                setSeverity('success')\r\n                setOpen(true)\r\n            }\r\n        ).catch(err => {console.log(err);})\r\n    }\r\n\r\n   \r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div className= {classes.root}>\r\n            <div className = {classes.title}>\r\n                <Typography className = {classes.title} variant=\"h3\">\r\n                    北파고 트레이닝\r\n                </Typography>\r\n            </div>\r\n            <div className = {classes.content}>\r\n                <div className={classes.mainContent}>\r\n                    <Grid \r\n                        className= {classes.mainGrid}\r\n                        container\r\n                        direction=\"row\"\r\n                    >\r\n                        <div className={classes.testCard}>\r\n                            <Card className={classes.card}>\r\n                                <CardContent>\r\n                                    <Typography className={classes.trainText} variant=\"h5\" >\r\n                                        {inputText}\r\n                                    </Typography>\r\n                                    <br />\r\n                                    <Typography variant=\"h6\" >\r\n                                        {outputText}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                        <Grid\r\n                                            className = {classes.cardGrid}\r\n                                            container \r\n                                            direction=\"row\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                            spacing={4}\r\n                                        >\r\n                                            <Grid item>\r\n                                                <Button \r\n                                                    variant=\"contained\"\r\n                                                    disableRipple\r\n                                                    size='large'\r\n                                                    onClick={transLike}\r\n                                                >\r\n                                                    <ThumbDownAltIcon></ThumbDownAltIcon>\r\n                                                </Button>\r\n                                            </Grid>\r\n                                            \r\n                                            <Grid item>\r\n                                                <Button \r\n                                                    variant=\"contained\"\r\n                                                    disableRipple\r\n                                                    size='large'\r\n                                                    onClick={transDislike}\r\n                                                >\r\n                                                    <ThumbUpAltIcon></ThumbUpAltIcon>\r\n                                                </Button>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </CardActions>\r\n                                <div>\r\n                                    <Tooltip className={classes.pass} onClick={getTestCase}  disableHoverListener title=\"Add\" >\r\n                                        <Button>건너뛰기 → </Button>\r\n                                    </Tooltip>\r\n                                </div>\r\n                            </Card>\r\n                        </div>\r\n                        \r\n                        <div className={classes.rankingCard}>\r\n                                <Card>\r\n                                    <CardContent>\r\n                                        <Grid\r\n                                            container\r\n                                            direction=\"column\"\r\n                                            justify=\"center\"\r\n                                            alignItems=\"center\"\r\n                                        >\r\n                                            <div>\r\n                                                <Grid container justify=\"center\" alignItems=\"center\">\r\n                                                    <Typography className = {classes.title} variant=\"h5\">\r\n                                                        오늘의 순위\r\n                                                    </Typography>\r\n                                                </Grid>\r\n                                            </div>\r\n                                            <div className={classes.ranking} >\r\n                                                <Grid\r\n                                                    container\r\n                                                    direction=\"column\"\r\n                                                    justify=\"center\"\r\n                                                    alignItems=\"center\"\r\n                                                    spacing={7}\r\n                                                >\r\n                                                    \r\n                                                {\r\n                                                    ranking.map((value,idx) => {\r\n                                                        \r\n                                                        return (\r\n                                                            \r\n                                                            <div>\r\n                                                                <Typography className={classes.rankingNum} variant=\"h6\" >{idx+1}. {value}</Typography>\r\n                                                            </div>\r\n\r\n                                                               \r\n                                                        )\r\n                                                    }\r\n                                                    )\r\n                                                }\r\n                                                </Grid>\r\n                                            </div>\r\n                                        </Grid>\r\n                                        \r\n                                    </CardContent>\r\n                                </Card>\r\n                        </div>\r\n                    </Grid>\r\n                    \r\n                    </div>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={1100}\r\n                    onClose={handleClose}\r\n                    content={content}\r\n                    severity={severity}\r\n                >\r\n                    <Alert onClose={handleClose} severity={severity}>\r\n                        {content}\r\n                    </Alert>\r\n                </Snackbar>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}","import './App.css';\r\nimport React,{useContext} from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { observer } from 'mobx-react';\r\nimport HomeLayout from './HomeLayout';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport TranslationView from './components/TranslationView';\r\nimport { createMuiTheme } from '@material-ui/core';\r\nimport MuiThemeProvider from '@material-ui/core/styles/MuiThemeProvider';\r\nimport SignInView from './components/SignInView';\r\nimport DictionaryView from './components/DictionaryView';\r\nimport TrainView from './components/TrainView'\r\nimport {useCookies} from 'react-cookie'\r\n\r\n\r\nconst useStyle = makeStyles((theme) => ({\r\n    '@global': {\r\n        'body, html': {\r\n            padding: 0,\r\n            margin: 0,\r\n            minHeight: '100%',\r\n            backgroundColor: '#f7fafa',\r\n        },\r\n    },\r\n}));\r\n\r\nconst theme = createMuiTheme({\r\n    palette: {\r\n        primary: {\r\n            main: '#58a0d1',\r\n            dark: '#3d7092',\r\n            light: '#79b3da',\r\n            contrastText: '#fff',\r\n        },\r\n        secondary: {\r\n            main: '#ffffff',\r\n            contrastText: '#fff',\r\n        },\r\n    },\r\n});\r\n\r\n\r\nconst App = observer((props) => {\r\n    const classes = useStyle();\r\n    const [cookies, setCookie,removeCookie] = useCookies(['jwt'])\r\n    const [hasCookie,setHasCookie] = React.useState(false)\r\n    React.useEffect(()=>{\r\n        if(cookies['jwt'] != undefined)\r\n            setHasCookie(true)\r\n    })\r\n    return (\r\n        <div className={classes.root}>\r\n            <MuiThemeProvider theme={theme}>\r\n                <Router>\r\n                    <HomeLayout  cookies={cookies} hasCookie={hasCookie} setHasCookie={setHasCookie} removeCookie={removeCookie} hasCookie={hasCookie}>\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={TranslationView} />\r\n                            <Route exact path=\"/dictionary\" component={DictionaryView} />\r\n                            <Route exact path=\"/train\" component={TrainView}/>\r\n                        </Switch>\r\n                    </HomeLayout>\r\n                    <Switch> \r\n                        <Route path=\"/sign-in\" component={SignInView} />\r\n                    </Switch>\r\n                </Router>\r\n            </MuiThemeProvider>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}